#! /bin/sh

## Find the R home directory.
: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
  echo "Could not determine R_HOME."
  exit 1
fi

R="${R_HOME}/bin/R"

GLPK_LIBS="-lglpk"
SBML_LIBS="-lsbml"

# test if glpk library can be called and used
rm -f glpktest.*

cat > glpktest.cc <<EOF
#include <glpk.h>
int main ()
{
   glp_prob *lp;
   lp = glp_create_prob();
   glp_delete_prob(lp);

   return 0;
}
EOF

_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false \
  "${R}" CMD SHLIB glpktest.cc ${GLPK_LIBS} >/dev/null 2>&1 \
  && "$R" --slave --vanilla -e 'dyn.load("glpktest.so")'
statusGLPK=${?}
if test ${statusGLPK} -ne 0; then
  rm -f glpktest.*o
  GLPK_LIBS="-lglpk -lgmp"
  _R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false \
    "${R}" CMD SHLIB glpktest.cc ${GLPK_LIBS} >/dev/null 2>&1 \
    && "$R" --slave --vanilla -e 'dyn.load("glpktest.so")'
  statusGLPK=${?}
fi

rm -f glpktest.*

if test ${statusGLPK} -eq 0; then
  GLPK_INCLUDE_PATH=
  GLPK_LIB_PATH=
else
  GLPK_INCLUDE_PATH="-IGLPK"
  GLPK_LIB_PATH="-LGLPK"
  GLPK_LIBS="-lglpk"
fi

#-----------------------------------------#
# test if libSBML can be called and used  #
#-----------------------------------------#
rm -f sbmltest.*
rm -f sbmltestFBC.*
rm -f sbmltestGroups.*

# SBML itself
cat > sbmltest.cc <<EOF
#include <iostream>
#include <sbml/SBMLTypes.h>

LIBSBML_CPP_NAMESPACE_USE

int main ()
{
  SBMLDocument *d = readSBML("inst/extdata/e_coli_core.xml");
  writeSBML(d, "sbmltest.xml");

  return 0;
}
EOF

_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false \
  "${R}" CMD SHLIB sbmltest.cc ${SBML_LIBS} >/dev/null 2>&1 \
  && "$R" --slave --vanilla -e 'dyn.load("sbmltest.so")'
statusSBML=${?}

# SBML extension FBC
cat > sbmltestFBC.cc <<EOF
#include <iostream>
#include <sbml/SBMLTypes.h>
#include <sbml/packages/fbc/common/FbcExtensionTypes.h>

LIBSBML_CPP_NAMESPACE_USE

int main ()
{
  SBMLNamespaces sbmlns(3,1,"fbc",1);
  SBMLDocument *d = new SBMLDocument(&sbmlns);
  d->setPackageRequired("fbc", false);

  return 0;
}
EOF

_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false \
  "${R}" CMD SHLIB sbmltestFBC.cc ${SBML_LIBS} >/dev/null 2>&1 \
  && "$R" --slave --vanilla -e 'dyn.load("sbmltestFBC.so")'
statusSBMLFBC=${?}

# SBML extension Groups
cat > sbmltestGroups.cc <<EOF
#include <iostream>
#include <sbml/SBMLTypes.h>
#include <sbml/packages/groups/common/GroupsExtensionTypes.h>

LIBSBML_CPP_NAMESPACE_USE

int main ()
{
  SBMLNamespaces sbmlns(3,2);
  sbmlns.addPkgNamespace("groups",1);
  SBMLDocument *d = new SBMLDocument(&sbmlns);
  d->setPackageRequired("groups", false);

  return 0;
}
EOF

_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false \
  "${R}" CMD SHLIB sbmltestGroups.cc ${SBML_LIBS} >/dev/null 2>&1 \
  && "$R" --slave --vanilla -e 'dyn.load("sbmltestGroups.so")'
statusSBMLGroups=${?}

if test ${statusSBML} -ne 0; then
  echo "No libSBML installation found."
else
  if test ${statusSBMLFBC} -ne 0; then
    echo "libSBML installation does not include FBC extension."
  fi
  if test ${statusSBMLGroups} -ne 0; then
    echo "libSBML installation does not include Groups extension."
  fi
fi

if [ "$statusSBMLFBC" -ne 0 -o "$statusSBMLGroups" -ne 0 ]; then
  exit;
fi

if test ${statusSBML} -eq 0; then
  SBML_INCLUDE_PATH=
  SBML_LIB_PATH=
else
  SBML_INCLUDE_PATH="-ISBML"
  SBML_LIB_PATH="-LSBML"
  SBML_LIBS="-lsbml"
fi

rm -f sbmltest.*
rm -f sbmltestFBC.*
rm -f sbmltestGroups.*

sed -e "s|@GLPK_INCLUDE_PATH@|${GLPK_INCLUDE_PATH}|" \
    -e "s|@GLPK_LIB_PATH@|${GLPK_LIB_PATH}|" \
    -e "s|@GLPK_LIBS@|${GLPK_LIBS}|" \
    -e "s|@SBML_INCLUDE_PATH@|${SBML_INCLUDE_PATH}|" \
    -e "s|@SBML_LIB_PATH@|${SBML_LIB_PATH}|" \
    -e "s|@SBML_LIBS@|${SBML_LIBS}|" \
    src/Makevars.in > src/Makevars
