// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getGLPKVersion
Rcpp::CharacterVector getGLPKVersion();
RcppExport SEXP _cobrar_getGLPKVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getGLPKVersion());
    return rcpp_result_gen;
END_RCPP
}
// initProb
SEXP initProb(const char* name);
RcppExport SEXP _cobrar_initProb(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(initProb(name));
    return rcpp_result_gen;
END_RCPP
}
// setObjDir
SEXP setObjDir(SEXP xp, int dir);
RcppExport SEXP _cobrar_setObjDir(SEXP xpSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(setObjDir(xp, dir));
    return rcpp_result_gen;
END_RCPP
}
// addColsLP
SEXP addColsLP(SEXP xp, SEXP ncols);
RcppExport SEXP _cobrar_addColsLP(SEXP xpSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(addColsLP(xp, ncols));
    return rcpp_result_gen;
END_RCPP
}
// addRowsLP
SEXP addRowsLP(SEXP xp, SEXP nrows);
RcppExport SEXP _cobrar_addRowsLP(SEXP xpSEXP, SEXP nrowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nrows(nrowsSEXP);
    rcpp_result_gen = Rcpp::wrap(addRowsLP(xp, nrows));
    return rcpp_result_gen;
END_RCPP
}
// loadMatrixLP
SEXP loadMatrixLP(SEXP xp, SEXP ne, SEXP ia, SEXP ja, SEXP ra);
RcppExport SEXP _cobrar_loadMatrixLP(SEXP xpSEXP, SEXP neSEXP, SEXP iaSEXP, SEXP jaSEXP, SEXP raSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ne(neSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ja(jaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ra(raSEXP);
    rcpp_result_gen = Rcpp::wrap(loadMatrixLP(xp, ne, ia, ja, ra));
    return rcpp_result_gen;
END_RCPP
}
// setColsBndsObjCoefsLP
SEXP setColsBndsObjCoefsLP(SEXP xp, SEXP j, SEXP type, SEXP lb, SEXP ub, SEXP obj_coef);
RcppExport SEXP _cobrar_setColsBndsObjCoefsLP(SEXP xpSEXP, SEXP jSEXP, SEXP typeSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP obj_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type j(jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj_coef(obj_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(setColsBndsObjCoefsLP(xp, j, type, lb, ub, obj_coef));
    return rcpp_result_gen;
END_RCPP
}
// setColsKindLP
SEXP setColsKindLP(SEXP xp, SEXP j, SEXP kind);
RcppExport SEXP _cobrar_setColsKindLP(SEXP xpSEXP, SEXP jSEXP, SEXP kindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type j(jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kind(kindSEXP);
    rcpp_result_gen = Rcpp::wrap(setColsKindLP(xp, j, kind));
    return rcpp_result_gen;
END_RCPP
}
// setRowsBndsLP
SEXP setRowsBndsLP(SEXP xp, SEXP i, SEXP type, SEXP lb, SEXP ub);
RcppExport SEXP _cobrar_setRowsBndsLP(SEXP xpSEXP, SEXP iSEXP, SEXP typeSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(setRowsBndsLP(xp, i, type, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// getSolStatLP
SEXP getSolStatLP(SEXP xp);
RcppExport SEXP _cobrar_getSolStatLP(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(getSolStatLP(xp));
    return rcpp_result_gen;
END_RCPP
}
// getColsPrimalLP
SEXP getColsPrimalLP(SEXP xp);
RcppExport SEXP _cobrar_getColsPrimalLP(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(getColsPrimalLP(xp));
    return rcpp_result_gen;
END_RCPP
}
// solveSimplex
SEXP solveSimplex(SEXP xp);
RcppExport SEXP _cobrar_solveSimplex(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(solveSimplex(xp));
    return rcpp_result_gen;
END_RCPP
}
// solveSimplexExact
SEXP solveSimplexExact(SEXP xp);
RcppExport SEXP _cobrar_solveSimplexExact(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(solveSimplexExact(xp));
    return rcpp_result_gen;
END_RCPP
}
// getObjVal
SEXP getObjVal(SEXP xp);
RcppExport SEXP _cobrar_getObjVal(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(getObjVal(xp));
    return rcpp_result_gen;
END_RCPP
}
// solveInterior
SEXP solveInterior(SEXP xp);
RcppExport SEXP _cobrar_solveInterior(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(solveInterior(xp));
    return rcpp_result_gen;
END_RCPP
}
// getObjValIpt
SEXP getObjValIpt(SEXP xp);
RcppExport SEXP _cobrar_getObjValIpt(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(getObjValIpt(xp));
    return rcpp_result_gen;
END_RCPP
}
// solveMIP
SEXP solveMIP(SEXP xp);
RcppExport SEXP _cobrar_solveMIP(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(solveMIP(xp));
    return rcpp_result_gen;
END_RCPP
}
// mipObjVal
SEXP mipObjVal(SEXP xp);
RcppExport SEXP _cobrar_mipObjVal(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(mipObjVal(xp));
    return rcpp_result_gen;
END_RCPP
}
// getSBMLVersion
Rcpp::String getSBMLVersion();
RcppExport SEXP _cobrar_getSBMLVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSBMLVersion());
    return rcpp_result_gen;
END_RCPP
}
// readSBMLfile
SEXP readSBMLfile(std::string file_path);
RcppExport SEXP _cobrar_readSBMLfile(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(readSBMLfile(file_path));
    return rcpp_result_gen;
END_RCPP
}
// getModelObj
SEXP getModelObj(SEXP sbml_document_ptr);
RcppExport SEXP _cobrar_getModelObj(SEXP sbml_document_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sbml_document_ptr(sbml_document_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelObj(sbml_document_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getModelId
Rcpp::String getModelId(SEXP model_ptr);
RcppExport SEXP _cobrar_getModelId(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelId(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getModelName
Rcpp::String getModelName(SEXP model_ptr);
RcppExport SEXP _cobrar_getModelName(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelName(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getModelCompartments
Rcpp::DataFrame getModelCompartments(SEXP model_ptr);
RcppExport SEXP _cobrar_getModelCompartments(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelCompartments(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getStoichiometricMatrix
arma::sp_mat getStoichiometricMatrix(SEXP model_ptr);
RcppExport SEXP _cobrar_getStoichiometricMatrix(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getStoichiometricMatrix(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getModelAnnotation
Rcpp::String getModelAnnotation(SEXP model_ptr);
RcppExport SEXP _cobrar_getModelAnnotation(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelAnnotation(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getModelNotes
Rcpp::String getModelNotes(SEXP model_ptr);
RcppExport SEXP _cobrar_getModelNotes(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelNotes(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getObjectiveFunction
Rcpp::NumericVector getObjectiveFunction(SEXP model_ptr);
RcppExport SEXP _cobrar_getObjectiveFunction(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getObjectiveFunction(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getSubsystems
Rcpp::List getSubsystems(SEXP model_ptr);
RcppExport SEXP _cobrar_getSubsystems(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getSubsystems(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getReactionIds
Rcpp::CharacterVector getReactionIds(SEXP model_ptr);
RcppExport SEXP _cobrar_getReactionIds(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getReactionIds(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getReactionNames
Rcpp::CharacterVector getReactionNames(SEXP model_ptr);
RcppExport SEXP _cobrar_getReactionNames(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getReactionNames(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getReactionAnnotation
Rcpp::CharacterVector getReactionAnnotation(SEXP model_ptr);
RcppExport SEXP _cobrar_getReactionAnnotation(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getReactionAnnotation(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getReactionFluxBounds
Rcpp::List getReactionFluxBounds(SEXP model_ptr);
RcppExport SEXP _cobrar_getReactionFluxBounds(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getReactionFluxBounds(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getMetaboliteIds
Rcpp::CharacterVector getMetaboliteIds(SEXP model_ptr);
RcppExport SEXP _cobrar_getMetaboliteIds(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getMetaboliteIds(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getMetaboliteNames
Rcpp::CharacterVector getMetaboliteNames(SEXP model_ptr);
RcppExport SEXP _cobrar_getMetaboliteNames(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getMetaboliteNames(model_ptr));
    return rcpp_result_gen;
END_RCPP
}
// getMetaboliteAnnotation
Rcpp::DataFrame getMetaboliteAnnotation(SEXP model_ptr);
RcppExport SEXP _cobrar_getMetaboliteAnnotation(SEXP model_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model_ptr(model_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getMetaboliteAnnotation(model_ptr));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_sbml_module();

static const R_CallMethodDef CallEntries[] = {
    {"_cobrar_getGLPKVersion", (DL_FUNC) &_cobrar_getGLPKVersion, 0},
    {"_cobrar_initProb", (DL_FUNC) &_cobrar_initProb, 1},
    {"_cobrar_setObjDir", (DL_FUNC) &_cobrar_setObjDir, 2},
    {"_cobrar_addColsLP", (DL_FUNC) &_cobrar_addColsLP, 2},
    {"_cobrar_addRowsLP", (DL_FUNC) &_cobrar_addRowsLP, 2},
    {"_cobrar_loadMatrixLP", (DL_FUNC) &_cobrar_loadMatrixLP, 5},
    {"_cobrar_setColsBndsObjCoefsLP", (DL_FUNC) &_cobrar_setColsBndsObjCoefsLP, 6},
    {"_cobrar_setColsKindLP", (DL_FUNC) &_cobrar_setColsKindLP, 3},
    {"_cobrar_setRowsBndsLP", (DL_FUNC) &_cobrar_setRowsBndsLP, 5},
    {"_cobrar_getSolStatLP", (DL_FUNC) &_cobrar_getSolStatLP, 1},
    {"_cobrar_getColsPrimalLP", (DL_FUNC) &_cobrar_getColsPrimalLP, 1},
    {"_cobrar_solveSimplex", (DL_FUNC) &_cobrar_solveSimplex, 1},
    {"_cobrar_solveSimplexExact", (DL_FUNC) &_cobrar_solveSimplexExact, 1},
    {"_cobrar_getObjVal", (DL_FUNC) &_cobrar_getObjVal, 1},
    {"_cobrar_solveInterior", (DL_FUNC) &_cobrar_solveInterior, 1},
    {"_cobrar_getObjValIpt", (DL_FUNC) &_cobrar_getObjValIpt, 1},
    {"_cobrar_solveMIP", (DL_FUNC) &_cobrar_solveMIP, 1},
    {"_cobrar_mipObjVal", (DL_FUNC) &_cobrar_mipObjVal, 1},
    {"_cobrar_getSBMLVersion", (DL_FUNC) &_cobrar_getSBMLVersion, 0},
    {"_cobrar_readSBMLfile", (DL_FUNC) &_cobrar_readSBMLfile, 1},
    {"_cobrar_getModelObj", (DL_FUNC) &_cobrar_getModelObj, 1},
    {"_cobrar_getModelId", (DL_FUNC) &_cobrar_getModelId, 1},
    {"_cobrar_getModelName", (DL_FUNC) &_cobrar_getModelName, 1},
    {"_cobrar_getModelCompartments", (DL_FUNC) &_cobrar_getModelCompartments, 1},
    {"_cobrar_getStoichiometricMatrix", (DL_FUNC) &_cobrar_getStoichiometricMatrix, 1},
    {"_cobrar_getModelAnnotation", (DL_FUNC) &_cobrar_getModelAnnotation, 1},
    {"_cobrar_getModelNotes", (DL_FUNC) &_cobrar_getModelNotes, 1},
    {"_cobrar_getObjectiveFunction", (DL_FUNC) &_cobrar_getObjectiveFunction, 1},
    {"_cobrar_getSubsystems", (DL_FUNC) &_cobrar_getSubsystems, 1},
    {"_cobrar_getReactionIds", (DL_FUNC) &_cobrar_getReactionIds, 1},
    {"_cobrar_getReactionNames", (DL_FUNC) &_cobrar_getReactionNames, 1},
    {"_cobrar_getReactionAnnotation", (DL_FUNC) &_cobrar_getReactionAnnotation, 1},
    {"_cobrar_getReactionFluxBounds", (DL_FUNC) &_cobrar_getReactionFluxBounds, 1},
    {"_cobrar_getMetaboliteIds", (DL_FUNC) &_cobrar_getMetaboliteIds, 1},
    {"_cobrar_getMetaboliteNames", (DL_FUNC) &_cobrar_getMetaboliteNames, 1},
    {"_cobrar_getMetaboliteAnnotation", (DL_FUNC) &_cobrar_getMetaboliteAnnotation, 1},
    {"_rcpp_module_boot_sbml_module", (DL_FUNC) &_rcpp_module_boot_sbml_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_cobrar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
