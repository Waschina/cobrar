[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Additional_constraints.html","id":"constraint-for-a-multi-carbon-source-growth-environment","dir":"Articles","previous_headings":"","what":"Constraint for a multi-carbon source growth environment","title":"Additional constraints","text":"Standard FBA models already contain linear constraints: Stationarity constraints: \\(\\boldsymbol{S}\\ \\boldsymbol{v}=\\boldsymbol{0}\\) Flux bounds individual reactions: \\(\\boldsymbol{lb} \\le \\boldsymbol{v} \\le \\boldsymbol{ub}\\) specific cases, can useful include additional linear constraints model, e.g., add additional thermodynamic constraints interactions reactions. tutorial aims illustrate additional constraints can added existing model inspect impact flux distribution predictions. First, load model Escherichia coli’s core metabolism. Second, change lower bounds exchange reactions three potential carbon sources, namely Glucose, Fructose, Fumarate. , simulate growth environment provides three carbon sources simultaneously. maximum uptake rate carbon source set \\(3\\ mmol\\  gDW^{-1}\\ hr^{-1}\\). Furthermore, set lower bound exchange reaction oxygen (EX_o2_e) \\(0\\ mmol\\ gDW^{-1}\\ hr^{-1}\\), simulate anoxic conditions. Fumarate 4 carbon atoms, Glucose Fructose 6 carbon atoms . , want add additional constraint model limits carbon source uptake total 35 C-atom-mmol per gram dry weight per hour. can accomplished : Next, can perform flux balance analysis (fba()) additional constraint inspect predicted fluxes exchange reactions. wen can see, Fructose Glucose consumed, uptake Fumarate virtually zero. Also, quite high production protons (ID: EX_h_e). Next, add another constraint, limits release protons depending growth rate. Specifically, limit release 5 mmol per newly formed gram dry weight biomass: \\[v_{H^+} \\le 5\\ v_{Biomass}\\] : \\[v_{H^+} - 5\\ v_{Biomass} \\le 0\\] constraint can easily added model: results show effect second constraint proton production (EX_h_e) reduced, three carbon sources consumed, including Fumarate.","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) mod <- changeBounds(mod, react = c(\"EX_glc__D_e\",\"EX_fru_e\", \"EX_fum_e\"),                     lb = c(-3,-3,-3)) mod <- changeBounds(mod, react = \"EX_o2_e\", lb = 0) mod <- addConstraint(mod, react = c(\"EX_glc__D_e\",\"EX_fru_e\", \"EX_fum_e\"),                      coeff = c(6,6,4), rtype = \"L\", lb = -35) # print the user constraint printConstraint(mod) #> [1] \"-35 <= +6 EX_fru_e +4 EX_fum_e +6 EX_glc__D_e < Inf\" sol <- fba(mod) getExchanges(mod, sol) #>             ID                    name          flux #> 1      EX_ac_e        Acetate exchange  5.234167e+00 #> 2   EX_acald_e   Acetaldehyde exchange  0.000000e+00 #> 3     EX_akg_e 2-Oxoglutarate exchange  0.000000e+00 #> 4     EX_co2_e            CO2 exchange -1.514230e-01 #> 5    EX_etoh_e        Ethanol exchange  5.144425e+00 #> 6     EX_for_e        Formate exchange  1.078766e+01 #> 7     EX_fru_e     D-Fructose exchange -3.000000e+00 #> 8     EX_fum_e       Fumarate exchange -2.398082e-14 #> 9  EX_glc__D_e      D-Glucose exchange -2.833333e+00 #> 10 EX_gln__L_e    L-Glutamine exchange  0.000000e+00 #> 11 EX_glu__L_e    L-Glutamate exchange  0.000000e+00 #> 12      EX_h_e             H+ exchange  1.772191e+01 #> 13    EX_h2o_e            H2O exchange -4.678495e+00 #> 14 EX_lac__D_e      D-lactate exchange  0.000000e+00 #> 15 EX_mal__L_e       L-Malate exchange  0.000000e+00 #> 16    EX_nh4_e        Ammonia exchange -4.621253e-01 #> 17     EX_o2_e             O2 exchange  0.000000e+00 #> 18     EX_pi_e      Phosphate exchange -3.117702e-01 #> 19    EX_pyr_e       Pyruvate exchange  0.000000e+00 #> 20   EX_succ_e      Succinate exchange  0.000000e+00 mod <- addConstraint(mod, react = c(\"EX_h_e\",\"BIOMASS_Ecoli_core_w_GAM\"),                      coeff = c(1, -5), rtype = \"U\", ub = 0) sol <- fba(mod) getExchanges(mod, sol) #>             ID                    name          flux #> 1      EX_ac_e        Acetate exchange  0.000000e+00 #> 2   EX_acald_e   Acetaldehyde exchange  0.000000e+00 #> 3     EX_akg_e 2-Oxoglutarate exchange  0.000000e+00 #> 4     EX_co2_e            CO2 exchange  1.104223e+01 #> 5    EX_etoh_e        Ethanol exchange  1.048018e+01 #> 6     EX_for_e        Formate exchange  2.438012e-01 #> 7     EX_fru_e     D-Fructose exchange -3.000000e+00 #> 8     EX_fum_e       Fumarate exchange -6.091407e-01 #> 9  EX_glc__D_e      D-Glucose exchange -2.427240e+00 #> 10 EX_gln__L_e    L-Glutamine exchange  0.000000e+00 #> 11 EX_glu__L_e    L-Glutamate exchange  0.000000e+00 #> 12      EX_h_e             H+ exchange  3.235326e-01 #> 13    EX_h2o_e            H2O exchange -1.848859e-01 #> 14 EX_lac__D_e      D-lactate exchange  0.000000e+00 #> 15 EX_mal__L_e       L-Malate exchange  0.000000e+00 #> 16    EX_nh4_e        Ammonia exchange -3.528317e-01 #> 17     EX_o2_e             O2 exchange  0.000000e+00 #> 18     EX_pi_e      Phosphate exchange -2.380359e-01 #> 19    EX_pyr_e       Pyruvate exchange  0.000000e+00 #> 20   EX_succ_e      Succinate exchange  2.784965e-11"},{"path":"/articles/Additional_constraints.html","id":"adding-multiple-constraints-at-once","dir":"Articles","previous_headings":"","what":"Adding multiple constraints at once","title":"Additional constraints","text":"example, constraints added model successively, separate addConstraint() call. can achieve final outcome model adding constraints simultaneously:","code":"# Load model fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  # Change bounds mod <- changeBounds(mod, react = c(\"EX_glc__D_e\",\"EX_fru_e\", \"EX_fum_e\"),                     lb = c(-3,-3,-3)) mod <- changeBounds(mod, react = \"EX_o2_e\", lb = 0)  # Adding constraints mod <- addConstraint(mod,                      react = list(                        c(\"EX_glc__D_e\",\"EX_fru_e\", \"EX_fum_e\"),                        c(\"EX_h_e\",\"BIOMASS_Ecoli_core_w_GAM\")                      ),                      coeff = list(                        c(6,6,4),                        c(1,-5)                      ), rtype = c(\"L\",\"U\"), lb = c(-35,NA), ub = c(NA, 0))  # Perform FBA sol <- fba(mod) getExchanges(mod, sol) #>             ID                    name          flux #> 1      EX_ac_e        Acetate exchange  0.000000e+00 #> 2   EX_acald_e   Acetaldehyde exchange  0.000000e+00 #> 3     EX_akg_e 2-Oxoglutarate exchange  0.000000e+00 #> 4     EX_co2_e            CO2 exchange  1.104223e+01 #> 5    EX_etoh_e        Ethanol exchange  1.048018e+01 #> 6     EX_for_e        Formate exchange  2.438012e-01 #> 7     EX_fru_e     D-Fructose exchange -3.000000e+00 #> 8     EX_fum_e       Fumarate exchange -6.091407e-01 #> 9  EX_glc__D_e      D-Glucose exchange -2.427240e+00 #> 10 EX_gln__L_e    L-Glutamine exchange  0.000000e+00 #> 11 EX_glu__L_e    L-Glutamate exchange  0.000000e+00 #> 12      EX_h_e             H+ exchange  3.235326e-01 #> 13    EX_h2o_e            H2O exchange -1.848859e-01 #> 14 EX_lac__D_e      D-lactate exchange  0.000000e+00 #> 15 EX_mal__L_e       L-Malate exchange  0.000000e+00 #> 16    EX_nh4_e        Ammonia exchange -3.528317e-01 #> 17     EX_o2_e             O2 exchange  0.000000e+00 #> 18     EX_pi_e      Phosphate exchange -2.380359e-01 #> 19    EX_pyr_e       Pyruvate exchange  0.000000e+00 #> 20   EX_succ_e      Succinate exchange  2.784965e-11"},{"path":[]},{"path":"/articles/Community_models.html","id":"background","dir":"Articles","previous_headings":"Merge models of organisms to construct community metabolic models","what":"Background","title":"Community models","text":"Microbial cells multi-species communities frequently engage metabolite exchange interactions1.","code":""},{"path":"/articles/Community_models.html","id":"workflow","dir":"Articles","previous_headings":"Merge models of organisms to construct community metabolic models","what":"Workflow","title":"Community models","text":"First, load wild type E. coli core metabolic model. Next, two single-gene knockout genotypes generated. example , chose two genes b0720 (citrate synthase, cs) b0767 (6-phosphogluconolactonase, pgl). Now ready generate community metabolic model joining two models mod_dCS mod_dPGL. merged model contains five compartments: extracellular space cytosol organism model M1 (“Δcs”) M2 (“Δpgl”)), plus new shared extracellular space e via genotypes can principle exchange metabolites (see figure). predict reaction exchange fluxes community, add additional constraints community model, namely flux coupling constraints. constraints effect, absolute reaction flux bounds organism x proportional biomass formation organism x. information flux coupling, please see documentation function fluxBMCoupling() paper Heinken et al. (2013)2. set. can now predict flux distribution within community metabolic model, e.g. via heuristic parsimonious FBA store results variable sol. inspect predicted growth rate per genotype, can run: Please note, organisms within community numbered consecutively order models supplied joinModels(...) function.","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) mod_dCS  <- rmGene(mod, \"b0720\") mod_dPGL <- rmGene(mod, \"b0767\") cmod <- joinModels(list(mod_dCS, mod_dPGL)) cmod #> model ID:                   cobrar-model  #> model name:                 cobrar-model  #> number of compartments:     5  #>                             M1_e  ( M1 extracellular space ) #>                             M1_c  ( M1 cytosol ) #>                             M2_e  ( M2 extracellular space ) #>                             M2_c  ( M2 cytosol ) #>                             e  ( shared extracellular space ) #> number of reactions:        208  #> number of metabolites:      164  #> number of unique genes:     272  #> number of user constraints: 0  #> number of subsystems:       0  #>  #> objective function:         +1 M1_BIOMASS_Ecoli_core_w_GAM +1 M2_BIOMASS_Ecoli_core_w_GAM  #> objective direction:        maximize cmod <- fluxBMCoupling(cmod, cpl_c = 200, cpl_u = 0.01) sol <- pfbaHeuristic(cmod) BMrxn <- guessBMReaction(cmod) # identify the biomass reactions within the community growth <- sol@fluxes[react_pos(cmod,BMrxn)] names(growth) <- BMrxn growth #> M1_BIOMASS_Ecoli_core_w_GAM M2_BIOMASS_Ecoli_core_w_GAM  #>                   0.4533128                   0.3778828"},{"path":"/articles/Community_models.html","id":"analysis-of-metabolic-interchange","dir":"Articles","previous_headings":"Merge models of organisms to construct community metabolic models","what":"Analysis of metabolic interchange","title":"Community models","text":"Finally, interested metabolic interactions genotypes. extract cross-feeding information flux prediction, can inspect flux rates organism exchange reactions (see figure ). Metabolites, non-zero flux rates respective organism exchange reactions signs predicted fluxes different, metabolites exchanged community members. First, data frame constructed contains organism exchange reaction IDs, names, predicted fluxes, corresponding organism Index (M1 M2). Next split data frame organism: Finally, data frames merged way, row represents metabolite two flux columns, one exchange reaction rates genotype. re-organised data frame makes easy spot cross-fed metabolites. output shows, “Δcs” genotype produces acetate consumes 2-oxoglutarate, “Δpgl” consumes acetate produced 2-oxoglutarate.","code":"dfCF <- data.frame(exrxn = cmod@react_id[grepl(\"^M[1|2]_EX_\", cmod@react_id)]) dfCF$model <- substr(dfCF$exrxn,1,2) dfCF$rxnname <- cmod@react_name[react_pos(cmod, dfCF$exrxn)] dfCF$flux <- sol@fluxes[react_pos(cmod, dfCF$exrxn)] dfCF_M1 <- dfCF[dfCF$model == \"M1\", c(\"rxnname\",\"flux\")] dfCF_M2 <- dfCF[dfCF$model == \"M2\", c(\"rxnname\",\"flux\")] dfCF <- merge(dfCF_M1, dfCF_M2, by = \"rxnname\", suffixes = c(\".dCS\",\".dPGL\"))  dfCF #>                    rxnname   flux.dCS  flux.dPGL #> 1  2-Oxoglutarate exchange  -1.299013   1.299013 #> 2    Acetaldehyde exchange   0.000000   0.000000 #> 3         Acetate exchange   5.224706  -5.224706 #> 4         Ammonia exchange  -2.471824  -2.060519 #> 5             CO2 exchange  11.864378  12.763680 #> 6      D-Fructose exchange   0.000000   0.000000 #> 7       D-Glucose exchange  -5.851613  -4.148387 #> 8       D-lactate exchange   0.000000   0.000000 #> 9         Ethanol exchange   0.000000   0.000000 #> 10        Formate exchange   0.000000   0.000000 #> 11       Fumarate exchange   0.000000   0.000000 #> 12             H+ exchange  11.720134   4.953649 #> 13            H2O exchange  12.568463  18.114355 #> 14    L-Glutamate exchange   0.000000   0.000000 #> 15    L-Glutamine exchange   0.000000   0.000000 #> 16       L-Malate exchange   0.000000   0.000000 #> 17             O2 exchange -10.041290 -13.625823 #> 18      Phosphate exchange  -1.667602  -1.390117 #> 19       Pyruvate exchange   0.000000   0.000000 #> 20      Succinate exchange   0.000000   0.000000"},{"path":"/articles/FVA.html","id":"variabilibity-in-metabolite-uptakeproduction-of-e--coli","dir":"Articles","previous_headings":"","what":"Variabilibity in metabolite uptake/production of E. coli","title":"Flux Variability Analysis (FVA)","text":"guide introduces Flux Variability Analysis (FVA) applied cobrar core metabolic network model Escherichia coli. , FVA applied estimate possible flux ranges metabolite exchanges (positive value = production, negative values = consumption) assuming minimal media D-glucose sole carbon source aerobic anaerobic growth conditions. following example, two packages required:","code":"library(cobrar) #> Loading required package: Matrix #> cobrar uses... #>  - libSBML (v. 5.19.0) #>  - glpk (v. 5.0) library(ggplot2)"},{"path":"/articles/FVA.html","id":"aerobic-growth-conditions","dir":"Articles","previous_headings":"Variabilibity in metabolite uptake/production of E. coli","what":"Aerobic growth conditions","title":"Flux Variability Analysis (FVA)","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  fvares <- fva(mod, react = mod@react_id[grepl(\"^EX_\",mod@react_id)],               opt.factor = seq(0.5, 1, length.out = 61)) fvares$react_name <- mod@react_name[match(fvares$react, mod@react_id)] fvares$react_name <- gsub(\" exchange$\",\"\",fvares$react_name)   ggplot(fvares,        aes(x = react_name)) +   geom_hline(yintercept = 0, linetype = 3) +   scale_color_viridis_c() +   geom_linerange(aes(ymin = min.flux, ymax = max.flux, col = growth.fraction),                  linewidth = 6) +   labs(x = \"Metabolite exchange\",        y = \"mmol / (gDW hr)\",        color = \"Growth fraction\") +   theme_bw() +   theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1))"},{"path":"/articles/FVA.html","id":"anaerobic-growth-conditions","dir":"Articles","previous_headings":"Variabilibity in metabolite uptake/production of E. coli","what":"Anaerobic growth conditions","title":"Flux Variability Analysis (FVA)","text":"","code":"mod_anero <- changeBounds(mod, \"EX_o2_e\", lb = 0)  fvares <- fva(mod_anero, react = mod_anero@react_id[grepl(\"^EX_\",mod_anero@react_id)],               opt.factor = seq(0.5, 1, length.out = 61)) fvares$react_name <- mod_anero@react_name[match(fvares$react, mod_anero@react_id)] fvares$react_name <- gsub(\" exchange$\",\"\",fvares$react_name)   ggplot(fvares,        aes(x = react_name)) +   geom_hline(yintercept = 0, linetype = 3) +   scale_color_viridis_c() +   geom_linerange(aes(ymin = min.flux, ymax = max.flux, col = growth.fraction),                  linewidth = 6) +   labs(x = \"Metabolite exchange\",        y = \"mmol / (gDW hr)\",        color = \"Growth fraction\") +   theme_bw() +   theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1))"},{"path":"/articles/cobrar.html","id":"performing-flux-balance-analysis-fba","dir":"Articles","previous_headings":"","what":"Performing Flux Balance Analysis (FBA)","title":"Introduction to cobrar","text":"following (brief) example illustrates use cobrar perform flux balance analysis core metabolism model Escherichia coli. first simulation, fluxes growth predicted default constraints model, represents minimal medium glucose sole carbon source presence oxygen. second simulation performs flux balance analysis without oxygen simulate anoxic growth environment. First, load wild type E. coli core metabolic model. Next, FBA performed predict model’s growth rate reaction fluxes. can also inspect metabolite consumption production looking predicted fluxes exchange reactions. table indicates organism growing aerobically, oxygen consumed (reaction “EX_o2_e” flux 0). simulate anaerobic growth, lower bound exchange reaction “EX_o2_e” can set 0. Now, growth rate reaction fluxes can predicted anaerobic growth.","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) sol <- fba(mod) sol #> algorithm:              FBA  #> generic status:         solution is optimal  #> solver status message:  optimization process was successful  #> Objective fct. value:   0.8739215  #> Secondary objective:    NA getExchanges(mod, sol) #>             ID                    name          flux #> 1      EX_ac_e        Acetate exchange  0.000000e+00 #> 2   EX_acald_e   Acetaldehyde exchange  0.000000e+00 #> 3     EX_akg_e 2-Oxoglutarate exchange  0.000000e+00 #> 4     EX_co2_e            CO2 exchange  2.280983e+01 #> 5    EX_etoh_e        Ethanol exchange  0.000000e+00 #> 6     EX_for_e        Formate exchange -6.804571e-13 #> 7     EX_fru_e     D-Fructose exchange  0.000000e+00 #> 8     EX_fum_e       Fumarate exchange  0.000000e+00 #> 9  EX_glc__D_e      D-Glucose exchange -1.000000e+01 #> 10 EX_gln__L_e    L-Glutamine exchange  0.000000e+00 #> 11 EX_glu__L_e    L-Glutamate exchange  0.000000e+00 #> 12      EX_h_e             H+ exchange  1.753087e+01 #> 13    EX_h2o_e            H2O exchange  2.917583e+01 #> 14 EX_lac__D_e      D-lactate exchange  0.000000e+00 #> 15 EX_mal__L_e       L-Malate exchange  0.000000e+00 #> 16    EX_nh4_e        Ammonia exchange -4.765319e+00 #> 17     EX_o2_e             O2 exchange -2.179949e+01 #> 18     EX_pi_e      Phosphate exchange -3.214895e+00 #> 19    EX_pyr_e       Pyruvate exchange  0.000000e+00 #> 20   EX_succ_e      Succinate exchange  0.000000e+00 mod_anaero <- changeBounds(mod, react = \"EX_o2_e\", lb = 0) sol_anaero <- fba(mod_anaero) sol_anaero #> algorithm:              FBA  #> generic status:         solution is optimal  #> solver status message:  optimization process was successful  #> Objective fct. value:   0.2116629  #> Secondary objective:    NA getExchanges(mod_anaero, sol_anaero) #>             ID                    name        flux #> 1      EX_ac_e        Acetate exchange   8.5035853 #> 2   EX_acald_e   Acetaldehyde exchange   0.0000000 #> 3     EX_akg_e 2-Oxoglutarate exchange   0.0000000 #> 4     EX_co2_e            CO2 exchange  -0.3781782 #> 5    EX_etoh_e        Ethanol exchange   8.2794554 #> 6     EX_for_e        Formate exchange  17.8046742 #> 7     EX_fru_e     D-Fructose exchange   0.0000000 #> 8     EX_fum_e       Fumarate exchange   0.0000000 #> 9  EX_glc__D_e      D-Glucose exchange -10.0000000 #> 10 EX_gln__L_e    L-Glutamine exchange   0.0000000 #> 11 EX_glu__L_e    L-Glutamate exchange   0.0000000 #> 12      EX_h_e             H+ exchange  30.5542183 #> 13    EX_h2o_e            H2O exchange  -7.1157960 #> 14 EX_lac__D_e      D-lactate exchange   0.0000000 #> 15 EX_mal__L_e       L-Malate exchange   0.0000000 #> 16    EX_nh4_e        Ammonia exchange  -1.1541557 #> 17     EX_o2_e             O2 exchange   0.0000000 #> 18     EX_pi_e      Phosphate exchange  -0.7786445 #> 19    EX_pyr_e       Pyruvate exchange   0.0000000 #> 20   EX_succ_e      Succinate exchange   0.0000000"},{"path":"/articles/cobrar.html","id":"editing-a-metabolic-network-model","dir":"Articles","previous_headings":"","what":"Editing a metabolic network model","title":"Introduction to cobrar","text":"example adds 4-aminobutyrate degradation pathway E. coli core metabolic model, already loaded stored object named mod. First, transporter reaction added model, can import 4-aminobutyrate (ID: 4abut). Next, add exchange reaction 4-aminobutyrate. lower bound exchange reaction set -1.5 mmol/(gDW*hr) simulate availability metabolite. next step, reaction 4-aminobutyrate amninotransferase (EC 2.6.1.19) added model, transfers amino group 4-aminobutyrate alpha-ketoglutarate (ID akg_c) forms L-glutamate (ID glu__L_c) succinic semialdehyde (ID sucsal_c). Finally, reaction Succinate-semialdehyde dehydrogenase (EC 1.2.1.24) added, oxidises succinic semialdehyde form succinate (ID succ_c). new reaction can printed equations: performing FBA updated model, can see growth rate increased new pathway 4-aminobutyrate indeed consumed E. coli.","code":"mod <- addReact(mod, id = \"ABUTt\", Scoef = c(-1,-1,1,1),                 met = c(\"4abut_e\",\"h_e\",\"4abut_c\",\"h_c\"), reversible = TRUE,                 lb = -1000, ub = 1000,                 reactName = \"4-aminobutyrate transport in via proton symport\",                 metName = c(\"4-aminobutyrate\",NA, \"4-aminobutyrate\",NA),                 metComp = c(\"e\",\"e\",\"c\",\"c\"), metCharge = c(0,NA,0,NA),                 metChemicalFormula = c(\"C4H9NO2\",NA,\"C4H9NO2\",NA),                 SBOTerm = \"SBO:0000185\") mod <- addReact(mod, id = \"EX_4abut_e\", Scoef = c(-1), met = \"4abut_e\",                 lb = -1.5, ub = 1000, reactName = \"4-aminobutyrate exchange\",                 SBOTerm = \"SBO:0000627\") mod <- addReact(mod, id = \"ABTA\", Scoef = c(-1,-1,1,1),                 met = c(\"4abut_c\",\"akg_c\",\"glu__L_c\",\"sucsal_c\"),                 lb = 0,                 reactName = \"4-aminobutyrate transaminase\",                 metName = c(NA,NA,NA,\"Succinic semialdehyde\"),                 metComp = c(NA,NA,NA,\"c\"), metCharge = c(NA,NA,NA,-1),                 metChemicalFormula = c(NA,NA,NA,\"C4H5O3\"),                 subsystem = \"GABAdegr\", subsystemName = \"4-aminobutyrate degradation\",                 CVTerms = \"bqbiol_is;http://identifiers.org/ec-code/2.6.1.19\",                 gprAssoc = \"b2662 | b1302\") mod <- addReact(mod, id = \"SSALx\", Scoef = c(-1,-1,-1,2,1,1),                 met = c(\"h2o_c\",\"nad_c\",\"sucsal_c\",\"h_c\",\"nadh_c\",\"succ_c\"),                 lb = 0,                 reactName = \"Succinate-semialdehyde dehydrogenase (NAD)\",                 subsystem = \"GABAdegr\",                 CVTerms = \"bqbiol_is;http://identifiers.org/ec-code/1.2.1.24\",                 gprAssoc = \"b1525\") printReaction(mod, c(\"EX_4abut_e\",\"ABUTt\",\"ABTA\",\"SSALx\")) #> [1] \"(1) 4-aminobutyrate <==> \"                                                                #> [2] \"(1) H+ + (1) 4-aminobutyrate <==> (1) H+ + (1) 4-aminobutyrate\"                           #> [3] \"(1) 2-Oxoglutarate + (1) 4-aminobutyrate --> (1) L-Glutamate + (1) Succinic semialdehyde\" #> [4] \"(1) H2O + (1) NAD + (1) Succinic semialdehyde --> (2) H+ + (1) NADH + (1) Succinate\" sol <- fba(mod) sol #> algorithm:              FBA  #> generic status:         solution is optimal  #> solver status message:  optimization process was successful  #> Objective fct. value:   0.9674959  #> Secondary objective:    NA getExchanges(mod, sol) #>             ID                     name       flux #> 1      EX_ac_e         Acetate exchange   0.000000 #> 2   EX_acald_e    Acetaldehyde exchange   0.000000 #> 3     EX_akg_e  2-Oxoglutarate exchange   0.000000 #> 4     EX_co2_e             CO2 exchange  24.827727 #> 5    EX_etoh_e         Ethanol exchange   0.000000 #> 6     EX_for_e         Formate exchange   0.000000 #> 7     EX_fru_e      D-Fructose exchange   0.000000 #> 8     EX_fum_e        Fumarate exchange   0.000000 #> 9  EX_glc__D_e       D-Glucose exchange -10.000000 #> 10 EX_gln__L_e     L-Glutamine exchange   0.000000 #> 11 EX_glu__L_e     L-Glutamate exchange   0.000000 #> 12      EX_h_e              H+ exchange  17.907968 #> 13    EX_h2o_e             H2O exchange  30.375354 #> 14 EX_lac__D_e       D-lactate exchange   0.000000 #> 15 EX_mal__L_e        L-Malate exchange   0.000000 #> 16    EX_nh4_e         Ammonia exchange  -3.775562 #> 17     EX_o2_e              O2 exchange -24.459205 #> 18     EX_pi_e       Phosphate exchange  -3.559127 #> 19    EX_pyr_e        Pyruvate exchange   0.000000 #> 20   EX_succ_e       Succinate exchange   0.000000 #> 21  EX_4abut_e 4-aminobutyrate exchange  -1.500000"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Silvio Waschina. Author, maintainer. Johannes Zimmermann. Author. Sina Zimmermann. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Waschina S, Zimmermann J, Zimmermann S (2024). cobrar: Constraint-Based Metabolic Network Analysis R. R package version 0.1.0, https://waschina.github.io/cobrar/, https://github.com/Waschina/cobrar.","code":"@Manual{,   title = {cobrar: Constraint-Based Metabolic Network Analysis in R},   author = {Silvio Waschina and Johannes Zimmermann and Sina Zimmermann},   year = {2024},   note = {R package version 0.1.0, https://waschina.github.io/cobrar/},   url = {https://github.com/Waschina/cobrar}, }"},{"path":"/index.html","id":"cobrar-","dir":"","previous_headings":"","what":"Constraint-Based Metabolic Network Analysis in R","title":"Constraint-Based Metabolic Network Analysis in R","text":"R package cobrar provides structures functions constraint-based metabolic network analysis, e.g. prediction metabolic fluxes using fluxes using Flux Balance Analysis (FBA). cobrar inspired former CRAN R package sybil(1).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Constraint-Based Metabolic Network Analysis in R","text":"Please note cobrar requires two system libraries libSBML glpk. following installation instructions different operating systems install dependencies first, cobrar. already libSBML glpk installed, can skip last part instructions. cobrar development installation instructions described install latest development version.","code":""},{"path":"/index.html","id":"ubuntudebianmint","dir":"","previous_headings":"Installation","what":"Ubuntu/Debian/Mint","title":"Constraint-Based Metabolic Network Analysis in R","text":"Install libSBML glpk: Install cobrar (R):","code":"sudo apt install libsbml-dev libglpk-dev # install.packages(\"remotes\") remotes::install_github(\"Waschina/cobrar\")"},{"path":"/index.html","id":"centosfedorarhel","dir":"","previous_headings":"Installation","what":"Centos/Fedora/RHEL","title":"Constraint-Based Metabolic Network Analysis in R","text":"Install libSBML glpk: Install cobrar (R):","code":"sudo yum install libsbml-devel glpk-devel # install.packages(\"remotes\") remotes::install_github(\"Waschina/cobrar\")"},{"path":"/index.html","id":"macos","dir":"","previous_headings":"Installation","what":"MacOS","title":"Constraint-Based Metabolic Network Analysis in R","text":"libSBML glpk can installed using homebrew: Install cobrar (R):","code":"brew install glpk brewsci/bio/libsbml # install.packages(\"remotes\") remotes::install_github(\"Waschina/cobrar\")"},{"path":"/index.html","id":"windows","dir":"","previous_headings":"Installation","what":"Windows","title":"Constraint-Based Metabolic Network Analysis in R","text":"TODO","code":""},{"path":"/index.html","id":"conda","dir":"","previous_headings":"Installation","what":"Conda","title":"Constraint-Based Metabolic Network Analysis in R","text":"TODO","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Constraint-Based Metabolic Network Analysis in R","text":"full documentation including illustrative examples available . simple Flux Balance Analysis (FBA) core metabolism Escherichia coli:","code":"library(cobrar) #> Loading required package: Matrix #> cobrar uses... #>  - libSBML (v. 5.18.0) #>  - glpk (v. 4.65) fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  fba(mod) #> algorithm:              FBA  #> generic status:         solution is optimal  #> solver status message:  optimization process was successful  #> Objective fct. value:   0.8739215  #> Secondary objective:    NA"},{"path":"/index.html","id":"key-differences-to-sybil","dir":"","previous_headings":"","what":"Key differences to sybil","title":"Constraint-Based Metabolic Network Analysis in R","text":"cobrar fully functional reading SBML files optimisation linear programs, without need additional packages sybilSBML glpkAPI. cobrar links libsbml via libsbml’s C++ API, C API sybilSBML package. GNU glpk library system requirement. links/references IBM’s CPLEX cobrar package, one reason sybil discontinued CRAN. roxygen2 used documenting functions classes. Feature trim: range functions sybil part cobrar. cobrar, R’s garbage collector handles memory management, including memory associated C++-objects pointers . Class “SysBiolAlg” sub-classes. Different algorithms function detailed documentation return values sybil, columns named “annotation” actually concatenated CVTerms (https://synonym.caltech.edu/software/libsbml/5.20.0/cpp-api/class_c_v_term.html). avoid confusion levels annotation, columns (e.g. react_attr met_attr) named ‘CVTerms’ cobrar. cobrar allows assign SBOTerms reactions, metabolites, genes. identification dead-end metabolites reading/exporting SBML files, pFBA algorithm (.k.MTF ‘Minimization Total Flux’). FVA; also now allows relaxed constraints optimal growth (e.g. flux variability 90-100% optimal growth)","code":""},{"path":"/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Constraint-Based Metabolic Network Analysis in R","text":"cobrar exports SBML files level 3 version 2 fbc version 3 groups version 1. Group assignments supported reactions. GLPK default solver required build package. plugin IBM’s ILOG CPLEX available (cobrarCPLEX). Multiple objectives. SBML standard fbc extension allows specify one objective (class ListOfObjectives). However, cobrar can handle one current objective function per model, defined objective coefficient vector slot obj_coef object class modelorg. Note reading SBML models, cobrar use objective, defined activeObjective SBML file, first objective active objective defined.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Constraint-Based Metabolic Network Analysis in R","text":"Gelius-Dietrich, G., Desouki, .., Fritzemeier, C.J., Lercher, M.J. sybil – Efficient constraint-based modelling R. BMC Syst Biol 7, 125 (2013). https://doi.org/10.1186/1752-0509-7-125","code":""},{"path":"/reference/COBRAR_SETTINGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get central cobrar parameters — COBRAR_SETTINGS","title":"Set and get central cobrar parameters — COBRAR_SETTINGS","text":"Manage set default parameter settings cobrar.","code":""},{"path":"/reference/COBRAR_SETTINGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get central cobrar parameters — COBRAR_SETTINGS","text":"","code":"COBRAR_SETTINGS(parm, value, ...)"},{"path":"/reference/COBRAR_SETTINGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get central cobrar parameters — COBRAR_SETTINGS","text":"parm character string giving name parameter set. value Choose value -write current parameter. ... TBD.","code":""},{"path":"/reference/Constraints-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of Constraints Class — Constraints-class","title":"Structure of Constraints Class — Constraints-class","text":"class represents user constraints can added model class ModelOrg addition stationarity constraint (\\(S v = 0\\)) flux bounds.","code":""},{"path":"/reference/Constraints-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structure of Constraints Class — Constraints-class","text":"slot \"rtype\" describes type constraint. Valid values effects :","code":""},{"path":"/reference/Constraints-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of Constraints Class — Constraints-class","text":"coeff sparse numeric matrix dgCMatrix-class representing coefficients reaction model. row denotes user constraint, column reaction model order slot \"S\" corresponding ModelOrg object. lb Numeric vector providing lower bound constraint. ub Numeric vector providing lower bound constraint. rtype Character vector stating constraint type. See details.","code":""},{"path":"/reference/FluxPrediction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of FluxPrediction Class — FluxPrediction-class","title":"Structure of FluxPrediction Class — FluxPrediction-class","text":"class represents flux prediction results, e.g., Flux Balance Analysis derived methods.","code":""},{"path":"/reference/FluxPrediction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of FluxPrediction Class — FluxPrediction-class","text":"algorithm Algorithm used flux prediction. ok LP solver's code type optimization result. ok_term LP solver's term type optimization result. stat Generic status (integer code) current basic solution optimization problem. stat_term Generic status (character term) current basic solution optimization problem. obj Objective value. obj_sec Value secondary objective function. E.g.: Summed absolute fluxes pfba. fluxes Predicted flux values. redCosts Predicted reduced costs (\"dual value\") reactions.","code":""},{"path":"/reference/LPproblem-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of LPproblem Class — LPproblem-class","title":"Structure of LPproblem Class — LPproblem-class","text":"class structure link LP problem C++ object.","code":""},{"path":"/reference/LPproblem-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of LPproblem Class — LPproblem-class","text":"ptr External pointer LP problem C++ object solver Solver used LP problem method Specific algorithm used LP solver","code":""},{"path":"/reference/LPproblem_glpk-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of LPproblem_glpk Class — LPproblem_glpk-class","title":"Structure of LPproblem_glpk Class — LPproblem_glpk-class","text":"class structure link LP problem C++ object. Class derived LPproblem","code":""},{"path":"/reference/ModelComm-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of ModelComm Class — ModelComm-class","title":"Structure of ModelComm Class — ModelComm-class","text":"class represents community model organisms.","code":""},{"path":"/reference/ModelComm-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of ModelComm Class — ModelComm-class","text":"community data.frame","code":""},{"path":"/reference/ModelOrg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of ModelOrg Class — ModelOrg-class","title":"Structure of ModelOrg Class — ModelOrg-class","text":"class represents model organism various attributes related central model structures, metabolites, reactions, genes.","code":""},{"path":"/reference/ModelOrg-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of ModelOrg Class — ModelOrg-class","text":"mod_id character vector representing model identifier. mod_desc character vector describing model. mod_name character vector containing model name. mod_compart character vector indicating model compartment. mod_compart_name character vector name model compartment. mod_attr data frame additional model attributes. mod_notes character string can contain XML block additional information model. S sparse numeric matrix dgCMatrix-class representing Stoichiometric matrix. obj_coef numeric vector containing coefficients objective function. obj_dir Character specifying objective direction. Either \"maximize\" \"minimize\". subSys sparse Boolean matrix lgCMatrix-class defining subsystems. subSys_id character vector representing subsystem identifiers. subSys_name character vector containing subsystem names. constraints object class Constraints specifies constraints model addition stationarity individual flux bounds. met_id character vector representing metabolite identifiers. met_name character vector metabolite names. met_comp character vector indicating metabolite compartments. met_attr data.frame enables storage additional data metabolites. specific columns exported SBML files. See writeSBMLmod details. react_id character vector representing reaction identifiers. react_name character vector reaction names. react_comp character vector indicating reaction compartments. lowbnd character vector containing lower bounds reactions. uppbnd character vector containing upper bounds reactions. react_attr data.frame enables storage additional data reactions. specific columns exported SBML files. See writeSBMLmod details. gprRules character vector Gene-Protein-Reaction association rules (gene product indices corresponding order slot 'genes'). genes list character vectors. vector contains IDs gene products associated respective reaction. allGenes character vector gene identifiers. genes_attr data.frame enables storage additional data (e.g., name CVTerms) genes/gene products. specific columns exported SBML files. See writeSBMLmod details.","code":""},{"path":"/reference/addCols-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to LP problem — addCols","title":"Add columns to LP problem — addCols","text":"Add columns (.k.. variables/reactions) LPproblem.","code":""},{"path":"/reference/addCols-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to LP problem — addCols","text":"","code":"addCols(lp, ...)  # S4 method for LPproblem_glpk addCols(lp, ncols)"},{"path":"/reference/addCols-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to LP problem — addCols","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. ncols Number columns add","code":""},{"path":"/reference/addCompartment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add compartments or update their data — addCompartment","title":"Add compartments or update their data — addCompartment","text":"function allows add one compartments model. providing ID already existing compartment, can use function update compartment's name.","code":""},{"path":"/reference/addCompartment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add compartments or update their data — addCompartment","text":"","code":"addCompartment(model, id, name = NA)"},{"path":"/reference/addCompartment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add compartments or update their data — addCompartment","text":"model Model class ModelOrg id Character vector compartment IDs name Character vector compartment names","code":""},{"path":"/reference/addCompartment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add compartments or update their data — addCompartment","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) mod <- addCompartment(mod, id = \"p\", name = \"periplasm\")"},{"path":"/reference/addConstraint-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Add constraints to model — addConstraint","title":"Add constraints to model — addConstraint","text":"Add linear reaction flux constraints metabolic network.","code":""},{"path":"/reference/addConstraint-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add constraints to model — addConstraint","text":"","code":"addConstraint(model, react, coeff, rtype, lb = NULL, ub = NULL)  # S4 method for ModelOrg,character,numeric,character addConstraint(model, react, coeff, rtype, lb = NULL, ub = NULL)  # S4 method for ModelOrg,list,list,character addConstraint(model, react, coeff, rtype, lb = NULL, ub = NULL)"},{"path":"/reference/addConstraint-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add constraints to model — addConstraint","text":"model Model class ModelOrg react Character vector list character vectors containing model's reactions IDs part respective constraint. coeff Numeric vector list numeric vectors defining coefficients reactions listed 'react'. rtype Character vector describing type constraint(s). See details. lb, ub Numeric vector defining lower upper bound(s) constraint(s).","code":""},{"path":"/reference/addConstraint-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add constraints to model — addConstraint","text":"slot \"rtype\" describes type constraint. Valid values effects :","code":""},{"path":"/reference/addConstraint-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add constraints to model — addConstraint","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  # Simulate anaerobic growth mod <- changeBounds(mod, \"EX_o2_e\", lb = 0)  # Limit the proton production depending on the growth rate mod <- addConstraint(mod,                      react = c(\"EX_h_e\",\"BIOMASS_Ecoli_core_w_GAM\"),                      coeff = c(1, -20), rtype = \"U\", ub = 0)"},{"path":"/reference/addGene.html","id":null,"dir":"Reference","previous_headings":"","what":"Add genes or update their data — addGene","title":"Add genes or update their data — addGene","text":"function allows add one genes model. providing ID already existing genes, can use function update gene's information.","code":""},{"path":"/reference/addGene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add genes or update their data — addGene","text":"","code":"addGene(   model,   id,   name = NA,   CVTerms = NA,   SBOTerm = rep(\"SBO:0000243\", length(id)) )"},{"path":"/reference/addGene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add genes or update their data — addGene","text":"model Model class ModelOrg id Character vector gene IDs name Character vector gene names CVTerms Character vector genes' CV-Terms SBOTerm Character vector genes' SBO-Terms","code":""},{"path":"/reference/addMetabolite.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metabolites or update their data — addMetabolite","title":"Add metabolites or update their data — addMetabolite","text":"function allows add one metabolites model. providing ID already existing metabolite, can use function update metabolite information.","code":""},{"path":"/reference/addMetabolite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metabolites or update their data — addMetabolite","text":"","code":"addMetabolite(   model,   id,   comp = NA,   name = NA,   chemicalFormula = NA,   charge = NA,   CVTerms = NA,   SBOTerm = rep(\"SBO:0000247\", length(id)) )"},{"path":"/reference/addMetabolite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metabolites or update their data — addMetabolite","text":"model Model class ModelOrg id Character vector metabolite IDs comp Character vector metabolites' compartment IDs name Character vector metabolite names chemicalFormula Character vector metabolites' chemical formulas charge Numeric vector metabolites' charge CVTerms Character vector metabolites' CV-Terms SBOTerm Character vector metabolites' SBO-Terms","code":""},{"path":"/reference/addReact.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or modify a reaction — addReact","title":"Add or modify a reaction — addReact","text":"function can used add modify reaction existing model.","code":""},{"path":"/reference/addReact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or modify a reaction — addReact","text":"","code":"addReact(   model,   id,   met,   Scoef,   reversible = FALSE,   lb = 0,   ub = COBRAR_SETTINGS(\"MAXIMUM\"),   obj = 0,   subsystem = NA,   subsystemName = NA,   gprAssoc = NA,   reactName = NA,   metName = NA,   metComp = NA,   metCharge = NA,   metChemicalFormula = NA,   CVTerms = NA,   SBOTerm = \"guess\" )"},{"path":"/reference/addReact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or modify a reaction — addReact","text":"model Model class ModelOrg id Character reaction ID met Character vector providing IDs metabolites participate reaction Scoef Numeric vector (length met) stoichiometric coefficients metabolites met. value Scoef[] stoichiometric coefficient metabolite met[]. reversible option now effect legacy reasons. Whether reaction reversible inferred cobrar based lower upper bounds. lb, ub Single numeric values define lower upper flux limits, respectively. obj Single numeric value coefficient reaction objective function. subsystem vector character strings containing sub system IDs reaction belongs. subsystemName character vector (length subsystem) names subsystems. subsystem already part model want change name, just use NA corresponding entry. gprAssoc single character string giving Gene-Product-Reaction (GPR) association reaction. NA, GRP association created. reactName single character string giving name reaction. NA, value argument id used. metName vector character strings length met containing metabolites names metabolites given argument met. metComp vector character strings length met specifying compartment IDs metabolites given argument met. metCharge numeric vector length met defining charges metabolites given argument met. metChemicalFormula character vector length met defining chemical formulas metabolites given argument met. CVTerms Cross-references resources. SBOTerm term ID Systems Biology Ontology. 'guess', SBO inferred reaction details.","code":""},{"path":"/reference/addReact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add or modify a reaction — addReact","text":"want use function update data pre-existing reaction stoichiometry, use NA parameters 'met' 'Scoeff'. reaction already part model, reaction value (e.g., lb, ub, reactName), set NA effect old value used. reaction already part model, values parameter subsystem provided, previous set subsystem associations reaction removed. metabolites subsystems part model yet, added.","code":""},{"path":"/reference/addReact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or modify a reaction — addReact","text":"","code":"# This example adds the 4-aminobutyrate degradation pathway to the E. coli # core metabolic model fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  fba(mod) #> algorithm:              FBA  #> generic status:         solution is optimal  #> solver status message:  optimization process was successful  #> Objective fct. value:   0.8739215  #> Secondary objective:    NA   # 4abut transport: 4abut_e + h_e <=> 4abut_c + h_c mod <- addReact(mod, id = \"ABUTt\", Scoef = c(-1,-1,1,1),                 met = c(\"4abut_e\",\"h_e\",\"4abut_c\",\"h_c\"), reversible = TRUE,                 lb = -1000, ub = 1000,                 reactName = \"4-aminobutyrate transport in via proton symport\",                 metName = c(\"4-aminobutyrate\",NA, \"4-aminobutyrate\",NA),                 metComp = c(\"e\",\"e\",\"c\",\"c\"), metCharge = c(0,NA,0,NA),                 metChemicalFormula = c(\"C4H9NO2\",NA,\"C4H9NO2\",NA))  # exchange reaction for 4abut (with 1.5 mmol/gDW/hr availability) mod <- addReact(mod, id = \"EX_4abut_e\", Scoef = c(-1), met = \"4abut_e\",                 lb = -1.5, ub = 1000, reactName = \"4-aminobutyrate exchange\")  # 4abut amninotransferase (EC 2.6.1.19) mod <- addReact(mod, id = \"ABTA\", Scoef = c(-1,-1,1,1),                 met = c(\"4abut_c\",\"akg_c\",\"glu__L_c\",\"sucsal_c\"),                 lb = 0,                 reactName = \"4-aminobutyrate transaminase\",                 metName = c(NA,NA,NA,\"Succinic semialdehyde\"),                 metComp = c(NA,NA,NA,\"c\"), metCharge = c(NA,NA,NA,-1),                 metChemicalFormula = c(NA,NA,NA,\"C4H5O3\"),                 subsystem = \"GABAdegr\", subsystemName = \"4-aminobutyrate degradation\",                 CVTerms = \"bqbiol_is;http://identifiers.org/ec-code/2.6.1.19\",                 gprAssoc = \"b2662 | b1302\")  # Succinate-semialdehyde dehydrogenase (NAD) (EC 1.2.1.24) mod <- addReact(mod, id = \"SSALx\", Scoef = c(-1,-1,-1,2,1,1),                 met = c(\"h2o_c\",\"nad_c\",\"sucsal_c\",\"h_c\",\"nadh_c\",\"succ_c\"),                 lb = 0,                 reactName = \"Succinate-semialdehyde dehydrogenase (NAD)\",                 subsystem = \"GABAdegr\",                 CVTerms = \"bqbiol_is;http://identifiers.org/ec-code/1.2.1.24\",                 gprAssoc = \"b1525\")  printReaction(mod, \"SSALx\") #> [1] \"(1) H2O + (1) NAD + (1) Succinic semialdehyde --> (2) H+ + (1) NADH + (1) Succinate\"  fba(mod) #> algorithm:              FBA  #> generic status:         solution is optimal  #> solver status message:  optimization process was successful  #> Objective fct. value:   0.9674959  #> Secondary objective:    NA"},{"path":"/reference/addRows-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Add rows to LP problem — addRows","title":"Add rows to LP problem — addRows","text":"Add rows (.k.. constraints) LPproblem.","code":""},{"path":"/reference/addRows-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add rows to LP problem — addRows","text":"","code":"addRows(lp, ...)  # S4 method for LPproblem_glpk addRows(lp, nrows)"},{"path":"/reference/addRows-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add rows to LP problem — addRows","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. nrows Number rows add","code":""},{"path":"/reference/addSingleConstraint-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Add single constraint — addSingleConstraint","title":"Add single constraint — addSingleConstraint","text":"Add single constraint existing LPproblem.","code":""},{"path":"/reference/addSingleConstraint-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add single constraint — addSingleConstraint","text":"","code":"addSingleConstraint(lp, ...)  # S4 method for LPproblem_glpk addSingleConstraint(lp, coeffs, lb, ub, type)"},{"path":"/reference/addSingleConstraint-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add single constraint — addSingleConstraint","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. coeffs Linear coefficients variables lb Lower bound constraint ub Upper bound constraint type Constraint type","code":""},{"path":"/reference/addSubsystem.html","id":null,"dir":"Reference","previous_headings":"","what":"Add subsystems or update their data — addSubsystem","title":"Add subsystems or update their data — addSubsystem","text":"function allows add one subsystems model. providing ID already existing subsystem, can use function update subsystem's name.","code":""},{"path":"/reference/addSubsystem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add subsystems or update their data — addSubsystem","text":"","code":"addSubsystem(model, id, name = NA)"},{"path":"/reference/addSubsystem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add subsystems or update their data — addSubsystem","text":"model Model class ModelOrg id Character vector subsystem IDs name Character vector subsystem names","code":""},{"path":"/reference/addSubsystem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add subsystems or update their data — addSubsystem","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) mod <- addSubsystem(mod, id = \"Bifidoshunt\",                     name = \"glucose fermentation to acetate and lactate (Bifidobacteria)\")"},{"path":"/reference/changeBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Change flux bounds — changeBounds","title":"Change flux bounds — changeBounds","text":"function changes either upper bounds, lower bounds, specific reactions.","code":""},{"path":"/reference/changeBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change flux bounds — changeBounds","text":"","code":"changeBounds(model, react, lb = NULL, ub = NULL)"},{"path":"/reference/changeBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change flux bounds — changeBounds","text":"model Model class ModelOrg react character vector stating reaction IDs model numeric vector providing reaction indices. lb numeric vector giving new lower flux bounds reactions react. lb length 1, value used reactions. ub numeric vector giving new upper flux bounds reactions react. ub length 1, value used reactions.","code":""},{"path":"/reference/changeBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change flux bounds — changeBounds","text":"updated model class ModelOrg","code":""},{"path":"/reference/checkCompartmentId.html","id":null,"dir":"Reference","previous_headings":"","what":"Check compartment IDs and Indices — checkCompartmentId","title":"Check compartment IDs and Indices — checkCompartmentId","text":"Checks whether compartment IDs indices part (valid) specific model.","code":""},{"path":"/reference/checkCompartmentId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check compartment IDs and Indices — checkCompartmentId","text":"","code":"checkCompartmentId(model, comp)"},{"path":"/reference/checkCompartmentId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check compartment IDs and Indices — checkCompartmentId","text":"model Model class ModelOrg comp character vector specifying compartment IDs integer vector providing compartment indices model.","code":""},{"path":"/reference/checkCompartmentId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check compartment IDs and Indices — checkCompartmentId","text":"logical vector; TRUE ID/index valid, FALSE otherwise.","code":""},{"path":"/reference/checkGeneId.html","id":null,"dir":"Reference","previous_headings":"","what":"Check gene IDs and Indices — checkGeneId","title":"Check gene IDs and Indices — checkGeneId","text":"Checks whether gene IDs indices part (valid) specific model.","code":""},{"path":"/reference/checkGeneId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check gene IDs and Indices — checkGeneId","text":"","code":"checkGeneId(model, gene)"},{"path":"/reference/checkGeneId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check gene IDs and Indices — checkGeneId","text":"model Model class ModelOrg gene character vector specifying gene IDs integer vector providing gene indices model.","code":""},{"path":"/reference/checkGeneId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check gene IDs and Indices — checkGeneId","text":"logical vector; TRUE ID/index valid, FALSE otherwise.","code":""},{"path":"/reference/checkMetId.html","id":null,"dir":"Reference","previous_headings":"","what":"Check metabolite IDs and Indices — checkMetId","title":"Check metabolite IDs and Indices — checkMetId","text":"Checks whether metabolite IDs indices part (valid) specific model.","code":""},{"path":"/reference/checkMetId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check metabolite IDs and Indices — checkMetId","text":"","code":"checkMetId(model, met)"},{"path":"/reference/checkMetId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check metabolite IDs and Indices — checkMetId","text":"model Model class ModelOrg met character vector specifying metabolite IDs integer vector providing metabolite indices model.","code":""},{"path":"/reference/checkMetId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check metabolite IDs and Indices — checkMetId","text":"logical vector; TRUE ID/index valid, FALSE otherwise.","code":""},{"path":"/reference/checkReactId.html","id":null,"dir":"Reference","previous_headings":"","what":"Check reaction IDs and Indices — checkReactId","title":"Check reaction IDs and Indices — checkReactId","text":"Checks whether reaction IDs indices part (valid) specific model.","code":""},{"path":"/reference/checkReactId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check reaction IDs and Indices — checkReactId","text":"","code":"checkReactId(model, react)"},{"path":"/reference/checkReactId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check reaction IDs and Indices — checkReactId","text":"model Model class ModelOrg react character vector specifying reaction IDs integer vector providing reaction indices model.","code":""},{"path":"/reference/checkReactId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check reaction IDs and Indices — checkReactId","text":"logical vector; TRUE ID/index valid, FALSE otherwise.","code":""},{"path":"/reference/checkSubsystemId.html","id":null,"dir":"Reference","previous_headings":"","what":"Check subsystem IDs and Indices — checkSubsystemId","title":"Check subsystem IDs and Indices — checkSubsystemId","text":"Checks whether subsystem IDs indices part (valid) specific model.","code":""},{"path":"/reference/checkSubsystemId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check subsystem IDs and Indices — checkSubsystemId","text":"","code":"checkSubsystemId(model, subsystem)"},{"path":"/reference/checkSubsystemId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check subsystem IDs and Indices — checkSubsystemId","text":"model Model class ModelOrg subsystem character vector specifying subsystem IDs integer vector providing subsystem indices model.","code":""},{"path":"/reference/checkSubsystemId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check subsystem IDs and Indices — checkSubsystemId","text":"logical vector; TRUE ID/index valid, FALSE otherwise.","code":""},{"path":"/reference/comp_num-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of compartments — comp_num","title":"Number of compartments — comp_num","text":"Get total number compartments model","code":""},{"path":"/reference/comp_num-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of compartments — comp_num","text":"","code":"comp_num(model)  # S4 method for ModelOrg comp_num(model)"},{"path":"/reference/comp_num-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of compartments — comp_num","text":"model Model class ModelOrg","code":""},{"path":"/reference/comp_pos-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of compartment(s) — comp_pos","title":"Index of compartment(s) — comp_pos","text":"Returns index(es) specific compartment(s).","code":""},{"path":"/reference/comp_pos-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of compartment(s) — comp_pos","text":"","code":"comp_pos(model, comp)  # S4 method for ModelOrg,character comp_pos(model, comp)  # S4 method for ModelOrg,numeric comp_pos(model, comp)  # S4 method for ModelOrg,missing comp_pos(model, comp)  # S4 method for ModelOrg,logical comp_pos(model, comp)"},{"path":"/reference/comp_pos-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of compartment(s) — comp_pos","text":"model Model class ModelOrg comp Character vector compartment IDs Integer vector providing indexes.","code":""},{"path":"/reference/comp_pos-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of compartment(s) — comp_pos","text":"Returns NA compartment IDs part model index larger number compartments model.","code":""},{"path":"/reference/constraint_num-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of constraints — constraint_num","title":"Number of constraints — constraint_num","text":"Get total number constraints model","code":""},{"path":"/reference/constraint_num-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of constraints — constraint_num","text":"","code":"constraint_num(model)  # S4 method for ModelOrg constraint_num(model)"},{"path":"/reference/constraint_num-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of constraints — constraint_num","text":"model Model class ModelOrg","code":""},{"path":"/reference/countElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Count elements in formulas — countElements","title":"Count elements in formulas — countElements","text":"Counts number elements molecules based chemical formulas.","code":""},{"path":"/reference/countElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count elements in formulas — countElements","text":"","code":"countElements(formulas, multiplier = 1)"},{"path":"/reference/countElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count elements in formulas — countElements","text":"formulas Character vector chemical formulas. multiplier Multiplier element coutns molecule","code":""},{"path":"/reference/countElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count elements in formulas — countElements","text":"numeric matrix named columns individual elements. Rows contain counts elements formula order formulas provided function.","code":""},{"path":"/reference/countElements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count elements in formulas — countElements","text":"Formulas may element numbers containing decimal points.","code":""},{"path":"/reference/countElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count elements in formulas — countElements","text":"","code":"countElements(c(\"C6H12O6\",\"C48H72CoN11O8\",\"HCOOH\")) #>       C  H O Co  N #> [1,]  6 12 6  0  0 #> [2,] 48 72 8  1 11 #> [3,]  1  2 2  0  0"},{"path":"/reference/deadEndMetabolites.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify dead end metabolites — deadEndMetabolites","title":"Identify dead end metabolites — deadEndMetabolites","text":"Searches metabolic network metabolites can produced consumed, vice versa.","code":""},{"path":"/reference/deadEndMetabolites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify dead end metabolites — deadEndMetabolites","text":"","code":"deadEndMetabolites(object)"},{"path":"/reference/deadEndMetabolites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify dead end metabolites — deadEndMetabolites","text":"object Model class ModelOrg","code":""},{"path":"/reference/deadEndMetabolites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify dead end metabolites — deadEndMetabolites","text":"list two elements: \"dem\" character vector IDs identified dead end metabolites. \"der\" character vector IDs reactions, involve least one dead end metabolites.","code":""},{"path":"/reference/deadEndMetabolites.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify dead end metabolites — deadEndMetabolites","text":"algorithm adapted original 'sybil' package, turn adapted implementation 'cobratoolbox'. Important detail: algorithm function 'sybil' package may return different results cobrar implementation. 'sybil' function take account possibility irreversible reaction defined direction RHS LHS (lower bound > 0 upper bound = 0).","code":""},{"path":"/reference/deadEndMetabolites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify dead end metabolites — deadEndMetabolites","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) deadEndMetabolites(mod) #> $dem #> [1] \"gln__L_e\" \"mal__L_e\" \"fru_e\"    \"fum_e\"    #>  #> $der #> [1] \"EX_fru_e\"    \"EX_fum_e\"    \"EX_gln__L_e\" \"EX_mal__L_e\" \"FRUpts2\"     #> [6] \"FUMt2_2\"     \"GLNabc\"      \"MALt2_2\"     #>"},{"path":"/reference/fba.html","id":null,"dir":"Reference","previous_headings":"","what":"Flux Balance Analysis — fba","title":"Flux Balance Analysis — fba","text":"Performs basic flux balance analysis (fba)","code":""},{"path":"/reference/fba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flux Balance Analysis — fba","text":"","code":"fba(model)"},{"path":"/reference/fba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flux Balance Analysis — fba","text":"model Model class ModelOrg","code":""},{"path":"/reference/fba.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flux Balance Analysis — fba","text":"list flux predictions (reaction fluxes 'fluxes', reduced costs 'redCosts'), optimization status ()","code":""},{"path":[]},{"path":"/reference/fba.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flux Balance Analysis — fba","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  # aerobic growth res_aero <- fba(mod) cat(\" Growth rate:       \", res_aero@obj,\"\\n\",     \"Acetate production:\", res_aero@fluxes[mod@react_id == \"EX_ac_e\"],\"\\n\") #>  Growth rate:        0.8739215  #>  Acetate production: 0   mod <- changeBounds(mod, react = \"EX_o2_e\", lb = 0) # before: -1000 res_anaero <- fba(mod) cat(\" Growth rate:       \", res_anaero@obj,\"\\n\",     \"Acetate production:\", res_anaero@fluxes[mod@react_id == \"EX_ac_e\"],\"\\n\") #>  Growth rate:        0.2116629  #>  Acetate production: 8.503585"},{"path":"/reference/fixBMRatios.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixate biomass ratios — fixBMRatios","title":"Fixate biomass ratios — fixBMRatios","text":"Biomass ratios fixed via introducing new linear constraints.","code":""},{"path":"/reference/fixBMRatios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixate biomass ratios — fixBMRatios","text":"","code":"fixBMRatios(model, BMreact = guessBMReaction(model), tolerance = 0)"},{"path":"/reference/fixBMRatios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixate biomass ratios — fixBMRatios","text":"model Community model class ModelComm BMreact IDs individual biomass reactions tolerance Tolerated deviation ratios","code":""},{"path":"/reference/fixBMRatios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixate biomass ratios — fixBMRatios","text":"Fixate biomass ratios community models according models' relative abundances.","code":""},{"path":"/reference/fluxBMCoupling.html","id":null,"dir":"Reference","previous_headings":"","what":"Couple reaction flux bounds to biomass production — fluxBMCoupling","title":"Couple reaction flux bounds to biomass production — fluxBMCoupling","text":"Resets absolute flux bounds reactions proportional flux biomass reaction.","code":""},{"path":"/reference/fluxBMCoupling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Couple reaction flux bounds to biomass production — fluxBMCoupling","text":"","code":"fluxBMCoupling(   model,   BMreact = guessBMReaction(model),   cpl_c = 400,   cpl_u = 0.01 )"},{"path":"/reference/fluxBMCoupling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Couple reaction flux bounds to biomass production — fluxBMCoupling","text":"model Community model class ModelComm BMreact IDs individual biomass reactions cpl_c Coupling constraint c cpl_u Coupling constraint u","code":""},{"path":"/reference/fluxBMCoupling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Couple reaction flux bounds to biomass production — fluxBMCoupling","text":"idea flux coupling flux balance models multi-species communities first introduced Heinken et al. (2013). idea limit reactions fluxes order prevent reaction one organism solely used (.e., carries non-zero flux) benefit another organism community organism produced enzyme specific reaction. Therefore, new linear constraints added flux balance model absolute reaction flux bounds organism j proportional biomass formation organism j. coupling constraints defined : $$-c v_{b,j} - u \\leq v_{,j} \\leq c v_{b,j} + u$$ \\(v_{,j}\\) flux reaction organism j, \\(v_{b,j}\\) biomass reaction organism j. c u parameters coupling constraints define intercept (u) slope (c) (see figure).","code":""},{"path":"/reference/fluxBMCoupling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Couple reaction flux bounds to biomass production — fluxBMCoupling","text":"Heinken , Sahoo S, Fleming RMT, Thiele . Systems-level characterization host-microbe metabolic symbiosis mammalian gut. Vol. 4, Gut Microbes; 2013. http://dx.doi.org/10.4161/gmic.22370","code":""},{"path":"/reference/fva.html","id":null,"dir":"Reference","previous_headings":"","what":"Flux Variability Analysis (FVA) — fva","title":"Flux Variability Analysis (FVA) — fva","text":"Perform Flux Variability Analysis without relaxed optimality constraint","code":""},{"path":"/reference/fva.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flux Variability Analysis (FVA) — fva","text":"","code":"fva(model, react = NULL, opt.factor = 1)"},{"path":"/reference/fva.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flux Variability Analysis (FVA) — fva","text":"model Model class ModelOrg react Character vector reaction IDs tested flux variability. NULL, reactions tested. opt.factor Numeric value > 0 define required fraction objective function value. E.g. 0.8 sets constraint, flux variability analysis, objective function value must least 80% original optimal value.","code":""},{"path":[]},{"path":"/reference/fva.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flux Variability Analysis (FVA) — fva","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath)  # Get flux variability for all exchange reactions fvares <- fva(mod, react = mod@react_id[grepl(\"^EX_\",mod@react_id)],               opt.factor = 0.9) fvares #>          react growth.fraction   min.flux   max.flux #> 1      EX_ac_e             0.9   0.000000   3.813556 #> 2   EX_acald_e             0.9   0.000000   2.542370 #> 3     EX_akg_e             0.9   0.000000   1.430083 #> 4     EX_co2_e             0.9  15.206526  26.528850 #> 5    EX_etoh_e             0.9   0.000000   2.214323 #> 6     EX_for_e             0.9   0.000000  11.322324 #> 7     EX_fru_e             0.9   0.000000   0.000000 #> 8     EX_fum_e             0.9   0.000000   0.000000 #> 9  EX_glc__D_e             0.9 -10.000000  -9.046611 #> 10 EX_gln__L_e             0.9   0.000000   0.000000 #> 11 EX_glu__L_e             0.9   0.000000   1.271185 #> 12      EX_h_e             0.9  15.777779  27.100103 #> 13    EX_h2o_e             0.9  20.935920  32.258244 #> 14 EX_lac__D_e             0.9   0.000000   2.145125 #> 15 EX_mal__L_e             0.9   0.000000   0.000000 #> 16    EX_nh4_e             0.9  -5.559972  -4.288787 #> 17     EX_o2_e             0.9 -25.619543 -17.992432 #> 18     EX_pi_e             0.9  -3.214895  -2.893406 #> 19    EX_pyr_e             0.9   0.000000   2.542370 #> 20   EX_succ_e             0.9   0.000000   1.674244"},{"path":"/reference/fvaJob-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for efficient FVA — fvaJob","title":"Wrapper function for efficient FVA — fvaJob","text":"Wrapper function efficient FVA","code":""},{"path":"/reference/fvaJob-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for efficient FVA — fvaJob","text":"","code":"fvaJob(lp, ...)  # S4 method for LPproblem_glpk fvaJob(lp, ind)"},{"path":"/reference/fvaJob-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for efficient FVA — fvaJob","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. ind Indices variables tested FVA","code":""},{"path":"/reference/geneDel.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify reactions affected by gene knockouts — geneDel","title":"Identify reactions affected by gene knockouts — geneDel","text":"function identifies reactions, catalyzed anymore specified set genes deleted model.","code":""},{"path":"/reference/geneDel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify reactions affected by gene knockouts — geneDel","text":"","code":"geneDel(model, gene)"},{"path":"/reference/geneDel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify reactions affected by gene knockouts — geneDel","text":"model Model class ModelOrg gene Character numeric vector providing IDs indices genes deleted 'model'.","code":""},{"path":"/reference/geneDel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify reactions affected by gene knockouts — geneDel","text":"Character vector reactions IDs.","code":""},{"path":"/reference/gene_num-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of genes — gene_num","title":"Number of genes — gene_num","text":"Get total number genes model","code":""},{"path":"/reference/gene_num-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of genes — gene_num","text":"","code":"gene_num(model)  # S4 method for ModelOrg gene_num(model)"},{"path":"/reference/gene_num-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of genes — gene_num","text":"model Model class ModelOrg","code":""},{"path":"/reference/gene_pos-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of gene(s) — gene_pos","title":"Index of gene(s) — gene_pos","text":"Returns index(es) specific gene(s).","code":""},{"path":"/reference/gene_pos-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of gene(s) — gene_pos","text":"","code":"gene_pos(model, gene)  # S4 method for ModelOrg,character gene_pos(model, gene)  # S4 method for ModelOrg,numeric gene_pos(model, gene)  # S4 method for ModelOrg,missing gene_pos(model, gene)"},{"path":"/reference/gene_pos-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of gene(s) — gene_pos","text":"model Model class ModelOrg gene Character vector gene IDs Integer vector providing indexes.","code":""},{"path":"/reference/gene_pos-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of gene(s) — gene_pos","text":"Returns NA gene IDs part model index larger number genes model.","code":""},{"path":"/reference/getColsPrimal-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve column primal value — getColsPrimal","title":"Retrieve column primal value — getColsPrimal","text":"Retrieve column primal value solved LPproblem.","code":""},{"path":"/reference/getColsPrimal-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve column primal value — getColsPrimal","text":"","code":"getColsPrimal(lp, ...)  # S4 method for LPproblem_glpk getColsPrimal(lp)"},{"path":"/reference/getColsPrimal-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve column primal value — getColsPrimal","text":"lp Object class LPproblem ... Additional parameters passed specific method instance.","code":""},{"path":"/reference/getExchanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metabolite exchange rates — getExchanges","title":"Get metabolite exchange rates — getExchanges","text":"Summarize predicted fluxes exchange reactions.","code":""},{"path":"/reference/getExchanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metabolite exchange rates — getExchanges","text":"","code":"getExchanges(model, sol)"},{"path":"/reference/getExchanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metabolite exchange rates — getExchanges","text":"model Model class ModelOrg sol Flux prediction results object class FluxPrediction.","code":""},{"path":"/reference/getExchanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metabolite exchange rates — getExchanges","text":"data.frame summarizes predicted metabolite exchange rates (=fluxes exchange reactions).","code":""},{"path":"/reference/getObjValue-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the objective value of a solved LP problem — getObjValue","title":"Get the objective value of a solved LP problem — getObjValue","text":"Get objective value solved LPproblem.","code":""},{"path":"/reference/getObjValue-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the objective value of a solved LP problem — getObjValue","text":"","code":"getObjValue(lp, ...)  # S4 method for LPproblem_glpk getObjValue(lp)"},{"path":"/reference/getObjValue-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the objective value of a solved LP problem — getObjValue","text":"lp Object class LPproblem ... Additional parameters passed specific method instance.","code":""},{"path":"/reference/getRedCosts-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve column reduced costs — getRedCosts","title":"Retrieve column reduced costs — getRedCosts","text":"Retrieve column reduced costs solved LPproblem.","code":""},{"path":"/reference/getRedCosts-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve column reduced costs — getRedCosts","text":"","code":"getRedCosts(lp, ...)  # S4 method for LPproblem_glpk getRedCosts(lp)"},{"path":"/reference/getRedCosts-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve column reduced costs — getRedCosts","text":"lp Object class LPproblem ... Additional parameters passed specific method instance.","code":""},{"path":"/reference/getSolStat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the solver status — getSolStat","title":"Get the solver status — getSolStat","text":"Get solver status solved LPproblem.","code":""},{"path":"/reference/getSolStat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the solver status — getSolStat","text":"","code":"getSolStat(lp, ...)  # S4 method for LPproblem_glpk getSolStat(lp)"},{"path":"/reference/getSolStat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the solver status — getSolStat","text":"lp Object class LPproblem ... Additional parameters passed specific method instance.","code":""},{"path":"/reference/guessBMReaction-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess biomass reaction(s) — guessBMReaction","title":"Guess biomass reaction(s) — guessBMReaction","text":"Guess biomass reaction(s)","code":""},{"path":"/reference/guessBMReaction-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess biomass reaction(s) — guessBMReaction","text":"","code":"guessBMReaction(model)  # S4 method for ModelOrg guessBMReaction(model)  # S4 method for ModelComm guessBMReaction(model)"},{"path":"/reference/guessBMReaction-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess biomass reaction(s) — guessBMReaction","text":"model Model class ModelOrg","code":""},{"path":"/reference/joinModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Join multiple metabolic models to form a community — joinModels","title":"Join multiple metabolic models to form a community — joinModels","text":"Merges multiple metabolic models one model organisms within compartment. Organism compartments connected shared extracellular space (.e., environment), organisms can take nutrients release metabolic -products. Exchange reactions attached new (shared) extracelluar compartment.","code":""},{"path":"/reference/joinModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join multiple metabolic models to form a community — joinModels","text":"","code":"joinModels(   models,   mergeLB = \"none\",   mergeUB = \"none\",   origExchangeBounds = \"open\",   abun = rep(1/length(models), length(models)) )"},{"path":"/reference/joinModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join multiple metabolic models to form a community — joinModels","text":"models list objects class ModelOrg mergeLB, mergeUB Method use cases individual models differ lower/upper bound values exchange reactions. Option \"min\" uses minimum LB/UB values found among individual models exchange reactions final merged model. \"max\" acts analogously. \"none\" cause method stop error, boundaries differ input models. options: \"median\",\"mean\". origExchangeBounds Method keep/open flux boundaries organism-specific exchange reactions. \"keep\" alter lower upper bounds organism exchange reactions, connect respective organism shared extracellular space. \"open\" removes constraints organism-specific exchange reactions. \"open_lb\" \"open_ub\" removes bounds lower upper limits, respectively. abun Numeric vector define relative abundance model organisms community. Entries vector ideally sum 1.","code":""},{"path":"/reference/loadLPprob-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a LP problem — loadLPprob","title":"Initialize a LP problem — loadLPprob","text":"Transfers variables, constraints objectives LPproblem.","code":""},{"path":"/reference/loadLPprob-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a LP problem — loadLPprob","text":"","code":"loadLPprob(lp, ...)  # S4 method for LPproblem_glpk loadLPprob(   lp,   nCols,   nRows,   mat,   ub,   lb,   obj,   rlb,   rtype,   lpdir,   rub = NULL,   ctype = NULL )"},{"path":"/reference/loadLPprob-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a LP problem — loadLPprob","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. nCols Number columns/variables nRows Number rows/constraints mat constraint-X-variable coefficient matrix ub Variable values' upper bounds lb Variable values' lower bounds obj Linear objective coefficients variables rlb Constraints' lower bounds rtype Constraint types lpdir Objective direction (\"max\" \"min\") rub Constraints' upper bounds ctype Variable types","code":""},{"path":"/reference/loadMatrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate a constraint-X-variable matrix — loadMatrix","title":"Populate a constraint-X-variable matrix — loadMatrix","text":"Add linear coefficients constraint-X-variable matrix LPproblem.","code":""},{"path":"/reference/loadMatrix-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate a constraint-X-variable matrix — loadMatrix","text":"","code":"loadMatrix(lp, ...)  # S4 method for LPproblem_glpk loadMatrix(lp, ne, ia, ja, ra)"},{"path":"/reference/loadMatrix-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate a constraint-X-variable matrix — loadMatrix","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. ne Number nonzero coefficients ia row indices nonzero coefficients ja column indices nonzero coefficients ra nonzero values respective entries","code":""},{"path":"/reference/met_num-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of metabolites — met_num","title":"Number of metabolites — met_num","text":"Get total number metabolites model","code":""},{"path":"/reference/met_num-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of metabolites — met_num","text":"","code":"met_num(model)  # S4 method for ModelOrg met_num(model)"},{"path":"/reference/met_num-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of metabolites — met_num","text":"model Model class ModelOrg","code":""},{"path":"/reference/met_pos-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of metabolite(s) — met_pos","title":"Index of metabolite(s) — met_pos","text":"Returns index(es) specific metabolite(s).","code":""},{"path":"/reference/met_pos-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of metabolite(s) — met_pos","text":"","code":"met_pos(model, met)  # S4 method for ModelOrg,character met_pos(model, met)  # S4 method for ModelOrg,numeric met_pos(model, met)  # S4 method for ModelOrg,missing met_pos(model, met)"},{"path":"/reference/met_pos-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of metabolite(s) — met_pos","text":"model Model class ModelOrg met Character vector metabolite IDs Integer vector providing indexes.","code":""},{"path":"/reference/met_pos-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of metabolite(s) — met_pos","text":"Returns NA metabolite IDs part model index larger number metabolites model.","code":""},{"path":"/reference/pfba.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsimonious Flux Balance Analysis (pFBA) — pfba","title":"Parsimonious Flux Balance Analysis (pFBA) — pfba","text":"Performs parsimonious FBA describe Lewis et al. 2010.","code":""},{"path":"/reference/pfba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsimonious Flux Balance Analysis (pFBA) — pfba","text":"","code":"pfba(model, costcoeffw = NULL, costcoefbw = NULL)"},{"path":"/reference/pfba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsimonious Flux Balance Analysis (pFBA) — pfba","text":"model Model class ModelOrg costcoeffw, costcoefbw numeric vector containing cost coefficients variables/reactions (forward direction: 'costcoeffw'; backward direction: 'costcoefbw'). set NULL, cost coefficients set 1, variables impact objective function.","code":""},{"path":"/reference/pfba.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsimonious Flux Balance Analysis (pFBA) — pfba","text":"Returned reduced costs ('redCosts') correspond optimization initial linear program (LP), basically initial FBA calculate optimal value objective function defined 'model'.","code":""},{"path":"/reference/pfba.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parsimonious Flux Balance Analysis (pFBA) — pfba","text":"N. E. Lewis et al., “Omic data evolved E. coli consistent computed optimal growth genome‐scale models,” Molecular Systems Biology, vol. 6, . 1. EMBO, Jan. 2010. doi: 10.1038/msb.2010.47.","code":""},{"path":[]},{"path":"/reference/pfbaHeuristic.html","id":null,"dir":"Reference","previous_headings":"","what":"Heuristic parsimonious Flux Balance Analysis (pFBA) — pfbaHeuristic","title":"Heuristic parsimonious Flux Balance Analysis (pFBA) — pfbaHeuristic","text":"Performs heuristic version parsimonious FBA algorithm. See details.","code":""},{"path":"/reference/pfbaHeuristic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heuristic parsimonious Flux Balance Analysis (pFBA) — pfbaHeuristic","text":"","code":"pfbaHeuristic(model, costcoeffw = NULL, costcoefbw = NULL, pFBAcoeff = 1e-06)"},{"path":"/reference/pfbaHeuristic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heuristic parsimonious Flux Balance Analysis (pFBA) — pfbaHeuristic","text":"model Model class ModelOrg costcoeffw, costcoefbw numeric vector containing cost coefficients variables/reactions (forward direction: 'costcoeffw'; backward direction: 'costcoefbw'). set NULL, cost coefficients set 1, variables impact objective function. pFBAcoeff Numeric value weight minimization total flux within combined objective function. See details.","code":""},{"path":"/reference/pfbaHeuristic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heuristic parsimonious Flux Balance Analysis (pFBA) — pfbaHeuristic","text":"exact-solution pFBA algorithm described Lewis et al. 2010 consists two optimization steps: (1) basic flux balance analysis performed obtain optimal value objective function (e.g., growth rate). (2) objective function (1) transformed constraint value function fixed determined optimal value. new objective defined minimizes absolute sum fluxes metabolic network. implemented heuristic pFBA performs one optimization step. Therefore, original objective function combined term minimizes absolute (weighted) sum fluxes: $$max: \\sum_{=1}^{n}(c_i v_i) - p \\sum_{=1}^{n}(w_i |v_i|)$$ maximization direction $$min: \\sum_{=1}^{n}(c_i v_i) + p \\sum_{=1}^{n}(w_i |v_i|)$$ original objective function minimized. , \\(c_i\\) original objective coefficient reaction \\(\\), \\(v_i\\) flux reaction \\(\\), \\(n\\) number reactions model, \\(w_i\\) weight reaction \\(\\) (see arguments 'costcoeffw', 'costcoefbw'). scalar parameter \\(p\\) (argument 'pFBAcoeff') defines weighting total flux minimization. Increasing value increases weight total flux minimization, possibly costs value objective function defined 'model' (e.g., flux biomass reaction). heuristic implementation pFBA core gap-filling algorithm 'gapseq' (Zimmermann et al. 2021).","code":""},{"path":"/reference/pfbaHeuristic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heuristic parsimonious Flux Balance Analysis (pFBA) — pfbaHeuristic","text":"N. E. Lewis et al., “Omic data evolved E. coli consistent computed optimal growth genome‐scale models,” Molecular Systems Biology, vol. 6, . 1. EMBO, Jan. 2010. doi: 10.1038/msb.2010.47. Zimmermann, C. Kaleta, S. Waschina, “gapseq: informed prediction bacterial metabolic pathways reconstruction accurate metabolic models,” Genome Biology, vol. 22, . 1. Springer Science Business Media LLC, Mar. 10, 2021. doi: 10.1186/s13059-021-02295-1.","code":""},{"path":[]},{"path":"/reference/printConstraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Constraint(s) — printConstraint","title":"Print Constraint(s) — printConstraint","text":"Generate strings summarize metabolic model constraints.","code":""},{"path":"/reference/printConstraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Constraint(s) — printConstraint","text":"","code":"printConstraint(model, ind = NULL)"},{"path":"/reference/printConstraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Constraint(s) — printConstraint","text":"model Model class ModelOrg ind Integer vector indices constraints printed","code":""},{"path":"/reference/printReaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Print reaction(s) — printReaction","title":"Print reaction(s) — printReaction","text":"Print equations reactions.","code":""},{"path":"/reference/printReaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print reaction(s) — printReaction","text":"","code":"printReaction(model, react, use.ids = FALSE)"},{"path":"/reference/printReaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print reaction(s) — printReaction","text":"model Model class ModelOrg react character vector specifying reaction IDs integer vector providing reaction indices model. use.ids Boolean. Indicating whether metabolite IDs printed instead metabolite names.","code":""},{"path":"/reference/printReaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print reaction(s) — printReaction","text":"character vector individual reaction equations.","code":""},{"path":"/reference/printReaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print reaction(s) — printReaction","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) # print reaction specified by index printReaction(mod, react = 2) #> [1] \"(1) Pyruvate + (1) Coenzyme A --> (1) Acetyl-CoA + (1) Formate\" # print reaction specified by ID printReaction(mod, react = \"PFL\") #> [1] \"(1) Pyruvate + (1) Coenzyme A --> (1) Acetyl-CoA + (1) Formate\" # print reaction with metabolite IDs instead of metabolite names printReaction(mod, react = \"PFL\", use.ids = TRUE) #> [1] \"(1) pyr_c + (1) coa_c --> (1) accoa_c + (1) for_c\" # print multiple reactions at once printReaction(mod, react = c(2,8)) #> [1] \"(1) Pyruvate + (1) Coenzyme A --> (1) Acetyl-CoA + (1) Formate\" #> [2] \"(1) D-Glycerate 2-phosphate <==> (1) 3-Phospho-D-glycerate\""},{"path":"/reference/react_num-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of reactions — react_num","title":"Number of reactions — react_num","text":"Get total number reactions model","code":""},{"path":"/reference/react_num-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of reactions — react_num","text":"","code":"react_num(model)  # S4 method for ModelOrg react_num(model)"},{"path":"/reference/react_num-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of reactions — react_num","text":"model Model class ModelOrg","code":""},{"path":"/reference/react_pos-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of reaction(s) — react_pos","title":"Index of reaction(s) — react_pos","text":"Returns index(es) specific reaction(s).","code":""},{"path":"/reference/react_pos-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of reaction(s) — react_pos","text":"","code":"react_pos(model, react)  # S4 method for ModelOrg,character react_pos(model, react)  # S4 method for ModelOrg,numeric react_pos(model, react)  # S4 method for ModelOrg,missing react_pos(model, react)"},{"path":"/reference/react_pos-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of reaction(s) — react_pos","text":"model Model class ModelOrg react Character vector reaction IDs Integer vector providing indexes.","code":""},{"path":"/reference/react_pos-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of reaction(s) — react_pos","text":"Returns NA reaction IDs part model index larger number reactions model.","code":""},{"path":"/reference/readSBMLmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads an SBML file and constructs an object of class 'ModelOrg' — readSBMLmod","title":"Reads an SBML file and constructs an object of class 'ModelOrg' — readSBMLmod","text":"Reads SBML file constructs object class 'ModelOrg'","code":""},{"path":"/reference/readSBMLmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads an SBML file and constructs an object of class 'ModelOrg' — readSBMLmod","text":"","code":"readSBMLmod(file_path)"},{"path":"/reference/readSBMLmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads an SBML file and constructs an object of class 'ModelOrg' — readSBMLmod","text":"file_path Path SBML file.","code":""},{"path":"/reference/readSBMLmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads an SBML file and constructs an object of class 'ModelOrg' — readSBMLmod","text":"ModelOrg-class object.","code":""},{"path":"/reference/readSBMLmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads an SBML file and constructs an object of class 'ModelOrg' — readSBMLmod","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) mod #> model ID:                   e_coli_core  #> model name:                 e_coli_core  #> number of compartments:     2  #>                             e  ( extracellular space ) #>                             c  ( cytosol ) #> number of reactions:        95  #> number of metabolites:      72  #> number of unique genes:     137  #> number of user constraints: 0  #> number of subsystems:       0  #>  #> objective function:         +1 BIOMASS_Ecoli_core_w_GAM  #> objective direction:        maximize"},{"path":"/reference/readSybilmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads a sybil model file and constructs an object of cobrar's class 'ModelOrg' — readSybilmod","title":"Reads a sybil model file and constructs an object of cobrar's class 'ModelOrg' — readSybilmod","text":"Reads sybil model file constructs object cobrar's class 'ModelOrg'","code":""},{"path":"/reference/readSybilmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads a sybil model file and constructs an object of cobrar's class 'ModelOrg' — readSybilmod","text":"","code":"readSybilmod(file_path)"},{"path":"/reference/readSybilmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads a sybil model file and constructs an object of cobrar's class 'ModelOrg' — readSybilmod","text":"file_path Path sybil model(s) saved RDS file.","code":""},{"path":"/reference/readSybilmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads a sybil model file and constructs an object of cobrar's class 'ModelOrg' — readSybilmod","text":"ModelOrg-class object list ModelOrg-class objects.","code":""},{"path":"/reference/rmCompartment.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove compartments from a model — rmCompartment","title":"Remove compartments from a model — rmCompartment","text":"function removes specified compartments model.","code":""},{"path":"/reference/rmCompartment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove compartments from a model — rmCompartment","text":"","code":"rmCompartment(model, comp)"},{"path":"/reference/rmCompartment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove compartments from a model — rmCompartment","text":"model Model class ModelOrg comp character vector stating compartment IDs model numeric vector providing compartment indices.","code":""},{"path":"/reference/rmCompartment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove compartments from a model — rmCompartment","text":"updated model class ModelOrg","code":""},{"path":"/reference/rmCompartment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove compartments from a model — rmCompartment","text":"least one provided compartments still metabolites associated , function stops error message.","code":""},{"path":"/reference/rmConstraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove constraints — rmConstraint","title":"Remove constraints — rmConstraint","text":"Remove specific user constraints metabolic model.","code":""},{"path":"/reference/rmConstraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove constraints — rmConstraint","text":"","code":"rmConstraint(model, ind)"},{"path":"/reference/rmConstraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove constraints — rmConstraint","text":"model Model class ModelOrg ind Integer vector indices constraints removed","code":""},{"path":[]},{"path":"/reference/rmGene.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove genes from a model — rmGene","title":"Remove genes from a model — rmGene","text":"function removes specified genes model, optionally also reactions metabolites inaccessible gene knock outs.","code":""},{"path":"/reference/rmGene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove genes from a model — rmGene","text":"","code":"rmGene(model, gene, rm_react = TRUE, rm_met = TRUE)"},{"path":"/reference/rmGene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove genes from a model — rmGene","text":"model Model class ModelOrg gene character vector stating reaction IDs model numeric vector providing reaction indices. rm_react Logical. reaction, inaccessible gene knock outs, deleted well? rm_met Logical. metabolites, singletons reaction removal, deleted well?","code":""},{"path":"/reference/rmGene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove genes from a model — rmGene","text":"updated model class ModelOrg","code":""},{"path":"/reference/rmGene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove genes from a model — rmGene","text":"","code":"fpath <- system.file(\"extdata\", \"e_coli_core.xml\", package=\"cobrar\") mod <- readSBMLmod(fpath) mod #> model ID:                   e_coli_core  #> model name:                 e_coli_core  #> number of compartments:     2  #>                             e  ( extracellular space ) #>                             c  ( cytosol ) #> number of reactions:        95  #> number of metabolites:      72  #> number of unique genes:     137  #> number of user constraints: 0  #> number of subsystems:       0  #>  #> objective function:         +1 BIOMASS_Ecoli_core_w_GAM  #> objective direction:        maximize   # create a double gene knock-out mutant mod_KO <- rmGene(mod, c(\"b4152\",\"b0116\")) mod_KO #> model ID:                   e_coli_core  #> model name:                 e_coli_core  #> number of compartments:     2  #>                             e  ( extracellular space ) #>                             c  ( cytosol ) #> number of reactions:        92  #> number of metabolites:      72  #> number of unique genes:     135  #> number of user constraints: 0  #> number of subsystems:       0  #>  #> objective function:         +1 BIOMASS_Ecoli_core_w_GAM  #> objective direction:        maximize"},{"path":"/reference/rmMetabolite.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove metabolites from a model — rmMetabolite","title":"Remove metabolites from a model — rmMetabolite","text":"function removes specified metabolites model.","code":""},{"path":"/reference/rmMetabolite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove metabolites from a model — rmMetabolite","text":"","code":"rmMetabolite(model, met)"},{"path":"/reference/rmMetabolite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove metabolites from a model — rmMetabolite","text":"model Model class ModelOrg met character vector stating metabolite IDs model numeric vector providing metabolite indices.","code":""},{"path":"/reference/rmMetabolite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove metabolites from a model — rmMetabolite","text":"updated model class ModelOrg","code":""},{"path":"/reference/rmMetabolite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove metabolites from a model — rmMetabolite","text":"least one provided metabolites still participates reaction, function stops error message.","code":""},{"path":"/reference/rmReact.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove reactions from a model — rmReact","title":"Remove reactions from a model — rmReact","text":"function removes specified reactions model.","code":""},{"path":"/reference/rmReact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove reactions from a model — rmReact","text":"","code":"rmReact(model, react, rm_met = TRUE)"},{"path":"/reference/rmReact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove reactions from a model — rmReact","text":"model Model class ModelOrg react character vector stating reaction IDs model numeric vector providing reaction indices. rm_met Logical. metabolites, singletons reaction removal, deleted well?","code":""},{"path":"/reference/rmReact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove reactions from a model — rmReact","text":"updated model class ModelOrg","code":""},{"path":"/reference/rmReact.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove reactions from a model — rmReact","text":"reaction participates user constraint, constraint removed model.","code":""},{"path":"/reference/rmSubsystem.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove subsystems from a model — rmSubsystem","title":"Remove subsystems from a model — rmSubsystem","text":"function removes specified subsystems model.","code":""},{"path":"/reference/rmSubsystem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove subsystems from a model — rmSubsystem","text":"","code":"rmSubsystem(model, subsystem)"},{"path":"/reference/rmSubsystem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove subsystems from a model — rmSubsystem","text":"model Model class ModelOrg subsystem character vector stating subsystem IDs model numeric vector providing subsystem indices.","code":""},{"path":"/reference/rmSubsystem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove subsystems from a model — rmSubsystem","text":"updated model class ModelOrg","code":""},{"path":"/reference/setColsBndsObjCoefs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Set column bounds and objective coefficients — setColsBndsObjCoefs","title":"Set column bounds and objective coefficients — setColsBndsObjCoefs","text":"Set column bounds objective coefficients LPproblem.","code":""},{"path":"/reference/setColsBndsObjCoefs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set column bounds and objective coefficients — setColsBndsObjCoefs","text":"","code":"setColsBndsObjCoefs(lp, ...)  # S4 method for LPproblem_glpk setColsBndsObjCoefs(lp, j, lb, ub, obj_coef, type = NULL)"},{"path":"/reference/setColsBndsObjCoefs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set column bounds and objective coefficients — setColsBndsObjCoefs","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. j Indices variables updated lb New lower bound variable ub New upper bound variable obj_coef New object coefficient variable type New type column/variable","code":""},{"path":"/reference/setColsKind-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Set column types — setColsKind","title":"Set column types — setColsKind","text":"Set column/variable types LPproblem.","code":""},{"path":"/reference/setColsKind-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set column types — setColsKind","text":"","code":"setColsKind(lp, ...)  # S4 method for LPproblem_glpk setColsKind(lp, j, kind)"},{"path":"/reference/setColsKind-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set column types — setColsKind","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. j Indices columns kind Type respective columns","code":""},{"path":"/reference/setObjDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set objective direction — setObjDir","title":"Set objective direction — setObjDir","text":"Set objective direction either maximize minimize","code":""},{"path":"/reference/setObjDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set objective direction — setObjDir","text":"","code":"setObjDir(model, dir)"},{"path":"/reference/setObjDir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set objective direction — setObjDir","text":"model Model class ModelOrg dir Character. Either \"maximize\" \"minimize\".","code":""},{"path":"/reference/setObjDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set objective direction — setObjDir","text":"updated model class ModelOrg","code":""},{"path":"/reference/setObjDirection-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Set objective direction — setObjDirection","title":"Set objective direction — setObjDirection","text":"Set objective function direction LPproblem.","code":""},{"path":"/reference/setObjDirection-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set objective direction — setObjDirection","text":"","code":"setObjDirection(lp, ...)  # S4 method for LPproblem_glpk setObjDirection(lp, lpdir)"},{"path":"/reference/setObjDirection-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set objective direction — setObjDirection","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. lpdir Objective direction (\"max\" \"min\")","code":""},{"path":"/reference/setRowsBnds-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Set row bounds — setRowsBnds","title":"Set row bounds — setRowsBnds","text":"Set row bounds LPproblem.","code":""},{"path":"/reference/setRowsBnds-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set row bounds — setRowsBnds","text":"","code":"setRowsBnds(lp, ...)  # S4 method for LPproblem_glpk setRowsBnds(lp, i, lb, ub, type)"},{"path":"/reference/setRowsBnds-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set row bounds — setRowsBnds","text":"lp Object class LPproblem ... Additional parameters passed specific method instance. Indices rows/constraints lb Lower bounds constraints ub Upper bound constraints type Type constraint bounds","code":""},{"path":"/reference/show-FluxPrediction-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a short summary of a flux prediction result — show,FluxPrediction-method","title":"Print a short summary of a flux prediction result — show,FluxPrediction-method","text":"Displays summary results obtained metabolic flux prediction (e.g., FBA pFBA).","code":""},{"path":"/reference/show-FluxPrediction-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a short summary of a flux prediction result — show,FluxPrediction-method","text":"","code":"# S4 method for FluxPrediction show(object)"},{"path":"/reference/show-FluxPrediction-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a short summary of a flux prediction result — show,FluxPrediction-method","text":"object S4-object class FluxPrediction.","code":""},{"path":"/reference/show-ModelOrg-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a short summary of a metabolic network model — show,ModelOrg-method","title":"Print a short summary of a metabolic network model — show,ModelOrg-method","text":"Displays key properties metabolic network model class ModelOrg.","code":""},{"path":"/reference/show-ModelOrg-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a short summary of a metabolic network model — show,ModelOrg-method","text":"","code":"# S4 method for ModelOrg show(object)"},{"path":"/reference/show-ModelOrg-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a short summary of a metabolic network model — show,ModelOrg-method","text":"object S4-object class ModelOrg.","code":""},{"path":"/reference/solveLp-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve an LP problem — solveLp","title":"Solve an LP problem — solveLp","text":"Solves LPproblem.","code":""},{"path":"/reference/solveLp-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve an LP problem — solveLp","text":"","code":"solveLp(lp, ...)  # S4 method for LPproblem_glpk solveLp(lp)"},{"path":"/reference/solveLp-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve an LP problem — solveLp","text":"lp Object class LPproblem ... Additional parameters passed specific method instance.","code":""},{"path":"/reference/subsys_num-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of subsystems — subsys_num","title":"Number of subsystems — subsys_num","text":"Get total number subsystems model","code":""},{"path":"/reference/subsys_num-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of subsystems — subsys_num","text":"","code":"subsys_num(model)  # S4 method for ModelOrg subsys_num(model)"},{"path":"/reference/subsys_num-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of subsystems — subsys_num","text":"model Model class ModelOrg","code":""},{"path":"/reference/subsys_pos-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of subsystem(s) — subsys_pos","title":"Index of subsystem(s) — subsys_pos","text":"Returns index(es) specific subsystem(s).","code":""},{"path":"/reference/subsys_pos-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of subsystem(s) — subsys_pos","text":"","code":"subsys_pos(model, subsys)  # S4 method for ModelOrg,character subsys_pos(model, subsys)  # S4 method for ModelOrg,numeric subsys_pos(model, subsys)  # S4 method for ModelOrg,missing subsys_pos(model, subsys)  # S4 method for ModelOrg,logical subsys_pos(model, subsys)"},{"path":"/reference/subsys_pos-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of subsystem(s) — subsys_pos","text":"model Model class ModelOrg subsys Character vector subsystem IDs Integer vector providing indexes.","code":""},{"path":"/reference/subsys_pos-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of subsystem(s) — subsys_pos","text":"Returns NA subsystem IDs part model index larger number subsystems model.","code":""},{"path":"/reference/writeSBMLmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Exports a Metabolic Network in SBML Format — writeSBMLmod","title":"Exports a Metabolic Network in SBML Format — writeSBMLmod","text":"Export constraint-based metabolic network model S4 object class ModelOrg SBML file.","code":""},{"path":"/reference/writeSBMLmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exports a Metabolic Network in SBML Format — writeSBMLmod","text":"","code":"writeSBMLmod(model, file_path = NULL)"},{"path":"/reference/writeSBMLmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exports a Metabolic Network in SBML Format — writeSBMLmod","text":"model Model class ModelOrg file_path SBML file name exporting model. Default model's ID \".xml\" suffix.","code":""},{"path":"/reference/writeSBMLmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exports a Metabolic Network in SBML Format — writeSBMLmod","text":"TRUE file export successful.","code":""},{"path":"/reference/writeSBMLmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exports a Metabolic Network in SBML Format — writeSBMLmod","text":"Exported SBML files level 3, version 2. FBC-package version 2. content data.frames react_attr, met_attr, mod_attr exported SBML files? Currently columns named \"CVTerms\".","code":""}]
